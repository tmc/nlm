Based on the provided Javascript, here are the updated Protobuf definitions. The changes primarily involve updating RPC IDs and adding new RPCs to the `LabsTailwindOrchestrationService` and making minor adjustments to messages.

### Updated Protobuf Files:

**proto/notebooklm/v1alpha1/notebooklm.proto**

```proto
// This is a hand reconstruction of the notebooklm types.
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "notebooklm/v1alpha1/rpc_extensions.proto";

package notebooklm.v1alpha1;

option go_package = "github.com/tmc/nlm/gen/notebooklm/v1alpha1;notebooklm";

message Project {
  string title = 1;
  repeated Source sources = 2;
  string project_id = 3;
  string emoji = 4;
  ProjectMetadata metadata = 6;
  //ChatbotConfig config = 6;
  //AdvancedSettings advanced_settings = 7;
  //oneof project_state {
  //  ProjectCreateData create = 8;
  //  ProjectDeleteData delete = 9;
  //}
}

message ProjectMetadata {
    int32 user_role = 1;
    bool session_active = 2;  // or similar
    // bool something = 3;
    reserved 4, 5; // field 4 confirmed in JS analysis, field 5 unknown
    google.protobuf.Timestamp modified_time = 6;
    int32 type = 7;
    bool is_starred = 8;
    google.protobuf.Timestamp create_time = 9;
}

message SourceId {
  string source_id = 1;
}

message Source {
  SourceId source_id = 1;
  string title = 2;
  SourceMetadata metadata = 3;
  SourceSettings settings = 4;
  repeated google.protobuf.Int32Value warnings = 5;
}

message SourceMetadata {
    oneof metadata_type {
      GoogleDocsSourceMetadata google_docs = 1;
      YoutubeSourceMetadata youtube = 6;
    }
    google.protobuf.Int32Value last_update_time_seconds = 2;
    google.protobuf.Timestamp last_modified_time = 3;
    // google.internal.labs.tailwind.common.v1.RevisionData revision_data = 4;
    SourceType source_type = 5;
}


enum SourceType {
    SOURCE_TYPE_UNSPECIFIED = 0;
    SOURCE_TYPE_UNKNOWN = 1;
    SOURCE_TYPE_GOOGLE_DOCS = 3;
    SOURCE_TYPE_GOOGLE_SLIDES = 4;
    SOURCE_TYPE_GOOGLE_SHEETS = 5;
    SOURCE_TYPE_LOCAL_FILE = 6;
    SOURCE_TYPE_WEB_PAGE = 7;
    SOURCE_TYPE_SHARED_NOTE = 8;
    SOURCE_TYPE_YOUTUBE_VIDEO = 9;
}


message GoogleDocsSourceMetadata {
    string document_id = 1;
}


message YoutubeSourceMetadata {
    string youtube_url = 1;
    string video_id = 2;
}


message SourceSettings {
    enum SourceStatus {
      SOURCE_STATUS_UNSPECIFIED = 0;
      SOURCE_STATUS_ENABLED = 1;
      SOURCE_STATUS_DISABLED = 2;
      SOURCE_STATUS_ERROR = 3;
    }
    SourceStatus status = 2;
    // google.internal.labs.tailwind.common.v1.SourceIssue reason = 3;
}

message SourceIssue {
  enum Reason {
    REASON_UNSPECIFIED = 0;
    REASON_TEMPORARY_SERVER_ERROR = 1;
    REASON_PERMANENT_SERVER_ERROR = 2;
    REASON_INVALID_SOURCE_ID = 3;
    REASON_SOURCE_NOT_FOUND = 4;
    REASON_UNSUPPORTED_MIME_TYPE = 5;
    REASON_YOUTUBE_ERROR_GENERIC = 6;
    REASON_YOUTUBE_ERROR_UNLISTED = 7;
    REASON_YOUTUBE_ERROR_PRIVATE = 8;
    REASON_YOUTUBE_ERROR_MEMBERS_ONLY = 9;
    REASON_YOUTUBE_ERROR_LOGIN_REQUIRED = 10;
    REASON_GOOGLE_DOCS_ERROR_GENERIC = 11;
    REASON_GOOGLE_DOCS_ERROR_NO_ACCESS = 12;
    REASON_GOOGLE_DOCS_ERROR_UNKNOWN = 13;
    REASON_DOWNLOAD_FAILURE = 14;
    REASON_UNKNOWN = 15;
  }
    Reason reason = 1;
}

message GetNotesResponse {
  repeated Source notes = 1;
}

message AudioOverview {
  string status = 1;
  string content = 2;
  string instructions = 3;
}

message GenerateDocumentGuidesResponse {
  repeated DocumentGuide guides = 1;
}

message DocumentGuide {
  string content = 1;
}

message GenerateNotebookGuideResponse {
  string content = 1;
}

message GenerateOutlineResponse {
  string content = 1;
}

message GenerateSectionResponse {
  string content = 1;
}

message StartDraftResponse {
}

message StartSectionResponse {
}




message ListRecentlyViewedProjectsResponse {
  repeated Project projects = 1;
}

// Placeholder for Note message, often aliased with Source
message Note {
    string note_id = 1;
    string title = 2;
    string content = 3;
    google.protobuf.Timestamp create_time = 4;
    google.protobuf.Timestamp modified_time = 5;
}

// Account messages moved from orchestration for better organization
message Account {
    string account_id = 1;
    string email = 2;
    AccountSettings settings = 3;
}

message AccountSettings {
    bool email_notifications = 1;
    string default_project_emoji = 2;
}

message ProjectAnalytics {
    int32 source_count = 1;
    int32 note_count = 2;
    int32 audio_overview_count = 3;
    google.protobuf.Timestamp last_accessed = 4;
}


service NotebookLM {
    // Notebook/Project operations
    rpc ListRecentlyViewedProjects(google.protobuf.Empty) returns (ListRecentlyViewedProjectsResponse) {
        option (rpc_id) = "wXbhsf";
    }
    rpc CreateProject(CreateNotebookRequest) returns (Project) {
        option (rpc_id) = "CCqFvf";
    }
    rpc GetProject(LoadNotebookRequest) returns (Project) {
        option (rpc_id) = "rLM1Ne";
    }
    rpc DeleteProjects(DeleteProjectsRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "WWINqb";
    }
    rpc MutateProject(MutateProjectRequest) returns (Project) {
        option (rpc_id) = "s0tc2d";
    }
    rpc RemoveRecentlyViewedProject(RemoveRecentlyViewedProjectRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "fejl7e";
    }

    // Source operations
    rpc AddSources(AddSourceRequest) returns (Source) {
        option (rpc_id) = "izAoDd";
    }
    rpc DeleteSources(DeleteSourcesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "tGMBJ";
    }
    rpc MutateSource(MutateSourceRequest) returns (Source) {
        option (rpc_id) = "b7Wfje";
    }
    rpc RefreshSource(RefreshSourceRequest) returns (Source) {
        option (rpc_id) = "FLmJqe";
    }
    rpc LoadSource(LoadSourceRequest) returns (Source) {
        option (rpc_id) = "hizoJc";
    }
    rpc CheckSourceFreshness(CheckSourceFreshnessRequest) returns (CheckSourceFreshnessResponse) {
        option (rpc_id) = "yR9Yof";
    }
    rpc ActOnSources(ActOnSourcesRequest) returns (ActOnSourcesResponse) {
        option (rpc_id) = "yyryJe";
    }

    // Note operations
    rpc CreateNote(CreateNoteRequest) returns (Note) {
        option (rpc_id) = "CYK0Xb";
    }
    rpc MutateNote(UpdateNoteRequest) returns (Note) {
        option (rpc_id) = "cYAfTb";
    }
    rpc DeleteNotes(DeleteNotesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "AH0mwd";
    }
    rpc GetNotes(GetNotesRequest) returns (GetNotesResponse) {
        option (rpc_id) = "cFji9";
    }

    // Audio operations
    rpc CreateAudioOverview(CreateAudioOverviewRequest) returns (AudioOverview) {
        option (rpc_id) = "AHyHrd";
    }
    rpc GetAudioOverview(GetAudioOverviewRequest) returns (AudioOverview) {
        option (rpc_id) = "VUsiyb";
    }
    rpc DeleteAudioOverview(DeleteAudioOverviewRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "sJDbic";
    }

    // Generation operations
    rpc GenerateDocumentGuides(GenerateDocumentGuidesRequest) returns (GenerateDocumentGuidesResponse) {
        option (rpc_id) = "tr032e";
    }
    rpc GenerateNotebookGuide(GenerateNotebookGuideRequest) returns (GenerateNotebookGuideResponse) {
        option (rpc_id) = "VfAZjd";
    }
    rpc GenerateOutline(GenerateOutlineRequest) returns (GenerateOutlineResponse) {
        option (rpc_id) = "lCjAd";
    }
    rpc GenerateSection(GenerateSectionRequest) returns (GenerateSectionResponse) {
        option (rpc_id) = "BeTrYd";
    }
    rpc StartDraft(StartDraftRequest) returns (StartDraftResponse) {
        option (rpc_id) = "exXvGf";
    }
    rpc StartSection(StartSectionRequest) returns (StartSectionResponse) {
        option (rpc_id) = "pGC7gf";
    }

    // Account operations
    rpc GetOrCreateAccount(GetOrCreateAccountRequest) returns (Account) {
        option (rpc_id) = "ZwVcOc";
    }
    rpc MutateAccount(MutateAccountRequest) returns (Account) {
        option (rpc_id) = "hT54vc";
    }

    // Analytics operations
    rpc GetProjectAnalytics(GetProjectAnalyticsRequest) returns (ProjectAnalytics) {
        option (rpc_id) = "AUrzMb";
    }
    rpc SubmitFeedback(SubmitFeedbackRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "uNyJKe";
    }
}

// Placeholder request messages. Their real structure is in orchestration.proto
// but they are referenced here in the original file.
message CreateNotebookRequest {}
message LoadNotebookRequest {}
message DeleteProjectsRequest {}
message MutateProjectRequest {}
message RemoveRecentlyViewedProjectRequest {}
message AddSourceRequest {}
message DeleteSourcesRequest {}
message MutateSourceRequest {}
message RefreshSourceRequest {}
message LoadSourceRequest {}
message CheckSourceFreshnessRequest {}
message CheckSourceFreshnessResponse {}
message ActOnSourcesRequest {}
message ActOnSourcesResponse {}
message CreateNoteRequest {}
message UpdateNoteRequest {}
message DeleteNotesRequest {}
message GetNotesRequest {}
message CreateAudioOverviewRequest {}
message GetAudioOverviewRequest {}
message DeleteAudioOverviewRequest {}
message GenerateDocumentGuidesRequest {}
message GenerateNotebookGuideRequest {}
message GenerateOutlineRequest {}
message GenerateSectionRequest {}
message StartDraftRequest {}
message StartSectionRequest {}
message GetOrCreateAccountRequest {}
message MutateAccountRequest {}
message GetProjectAnalyticsRequest {}
message SubmitFeedbackRequest {}


// Sharing service
service NotebookLMSharing {
    rpc ShareAudio(ShareAudioRequest) returns (ShareAudioResponse) {
        option (rpc_id) = "RGP97b";
    }
    rpc GetProjectDetails(GetProjectDetailsRequest) returns (ProjectDetails) {
        option (rpc_id) = "JFMDGd";
    }
    rpc ShareProject(ShareProjectRequest) returns (ShareProjectResponse) {
        option (rpc_id) = "QDyure";
    }
}

// Guidebooks service
service NotebookLMGuidebooks {
    rpc DeleteGuidebook(DeleteGuidebookRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "ARGkVc";
    }
    rpc GetGuidebook(GetGuidebookRequest) returns (Guidebook) {
        option (rpc_id) = "EYqtU";
    }
    rpc ListRecentlyViewedGuidebooks(ListRecentlyViewedGuidebooksRequest) returns (ListRecentlyViewedGuidebooksResponse) {
        option (rpc_id) = "YJBpHc";
    }
    rpc PublishGuidebook(PublishGuidebookRequest) returns (Guidebook) {
        option (rpc_id) = "R6smae";
    }
    rpc GetGuidebookDetails(GetGuidebookDetailsRequest) returns (GuidebookDetails) {
        option (rpc_id) = "LJyzeb";
    }
    rpc ShareGuidebook(ShareGuidebookRequest) returns (ShareGuidebookResponse) {
        option (rpc_id) = "OTl0K";
    }
}
```

**proto/notebooklm/v1alpha1/orchestration.proto**

```proto
// Orchestration service definitions discovered from JavaScript analysis
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "notebooklm/v1alpha1/rpc_extensions.proto";
import "notebooklm/v1alpha1/notebooklm.proto";

package notebooklm.v1alpha1;

option go_package = "github.com/tmc/nlm/gen/notebooklm/v1alpha1;notebooklm";

// Additional messages for orchestration

message Context {
    // Context information, structure inferred from usage
    string project_id = 1;
    repeated string source_ids = 2;
}

message Artifact {
    string artifact_id = 1;
    string project_id = 2;
    ArtifactType type = 3;
    repeated ArtifactSource sources = 4;
    ArtifactState state = 5;
    Source note = 7;  // Note is a special type of Source
    AudioOverview audio_overview = 8;
    Report tailored_report = 9;
    App app = 10;
}

enum ArtifactType {
    ARTIFACT_TYPE_UNSPECIFIED = 0;
    ARTIFACT_TYPE_NOTE = 1;
    ARTIFACT_TYPE_AUDIO_OVERVIEW = 2;
    ARTIFACT_TYPE_REPORT = 3;
    ARTIFACT_TYPE_APP = 4;
}

enum ArtifactState {
    ARTIFACT_STATE_UNSPECIFIED = 0;
    ARTIFACT_STATE_CREATING = 1;
    ARTIFACT_STATE_READY = 2;
    ARTIFACT_STATE_FAILED = 3;
}

message ArtifactSource {
    SourceId source_id = 1;
    repeated TextFragment text_fragments = 2;
}

message TextFragment {
    string text = 1;
    int32 start_offset = 2;
    int32 end_offset = 3;
}

message Report {
    string title = 1;
    string content = 2;
    repeated Section sections = 3;
}

message Section {
    string title = 1;
    string content = 2;
}

message App {
    string app_id = 1;
    string name = 2;
    string description = 3;
}

// Request/Response messages for LabsTailwindOrchestrationService

message CreateArtifactRequest {
    Context context = 1;
    string project_id = 2;
    Artifact artifact = 3;
}

message GetArtifactRequest {
    string artifact_id = 1;
}

message UpdateArtifactRequest {
    Artifact artifact = 1;
    google.protobuf.FieldMask update_mask = 2;
}

message DeleteArtifactRequest {
    string artifact_id = 1;
}

message ListArtifactsRequest {
    string project_id = 1;
    int32 page_size = 2;
    string page_token = 3;
}

message ListArtifactsResponse {
    repeated Artifact artifacts = 1;
    string next_page_token = 2;
}

message ActOnSourcesRequest {
    string project_id = 1;
    string action = 2;
    repeated string source_ids = 3;
}

message CreateAudioOverviewRequest {
    string project_id = 1;
    int32 audio_type = 2;
    repeated string instructions = 3;
}

message GetAudioOverviewRequest {
    string project_id = 1;
    int32 request_type = 2;
}

message DeleteAudioOverviewRequest {
    string project_id = 1;
}

message DiscoverSourcesRequest {
    string project_id = 1;
    string query = 2;
}

message DiscoverSourcesResponse {
    repeated Source sources = 1;
}

message GenerateFreeFormStreamedRequest {
    string project_id = 1;
    string prompt = 2;
    repeated string source_ids = 3;
}

message GenerateFreeFormStreamedResponse {
    string chunk = 1;
    bool is_final = 2;
}

message GenerateReportSuggestionsRequest {
    string project_id = 1;
}

message GenerateReportSuggestionsResponse {
    repeated string suggestions = 1;
}

message GetProjectAnalyticsRequest {
    string project_id = 1;
}


message ListFeaturedProjectsRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListFeaturedProjectsResponse {
    repeated Project projects = 1;
    string next_page_token = 2;
}

// Update existing request messages to match Gemini's findings
message AddSourceRequest {
    repeated SourceInput sources = 1;
    string project_id = 2;
}

message SourceInput {
    // For text sources
    string title = 1;
    string content = 2;
    
    // For file upload
    string base64_content = 3;
    string filename = 4;
    string mime_type = 5;
    
    // For URL sources
    string url = 6;
    
    // For YouTube
    string youtube_video_id = 7;
    
    SourceType source_type = 8;
}

message CreateNoteRequest {
    string project_id = 1;
    string content = 2;
    repeated int32 note_type = 3;
    string title = 5;
}

message DeleteNotesRequest {
    repeated string note_ids = 1;
}

message GetNotesRequest {
    string project_id = 1;
}

message MutateNoteRequest {
    string project_id = 1;
    string note_id = 2;
    repeated NoteUpdate updates = 3;
}

message NoteUpdate {
    string content = 1;
    string title = 2;
    repeated string tags = 3;
}

// Account management
message GetOrCreateAccountRequest {
    // Empty for now, uses auth token
}

message MutateAccountRequest {
    Account account = 1;
    google.protobuf.FieldMask update_mask = 2;
}

// New Request/Response messages based on JS analysis
message AddTentativeSourcesRequest {
    repeated SourceInput sources = 1;
    string project_id = 2;
}

message AddTentativeSourcesResponse {
    repeated Source sources = 1;
}

message DiscoverSourcesAsyncRequest {
    string project_id = 1;
    string query = 2;
}

message DiscoverSourcesAsyncResponse {
    string job_id = 1;
}

message GenerateMagicViewRequest {
    string project_id = 1;
    repeated string source_ids = 2;
}

message MagicViewItem {
    string title = 1;
}

message GenerateMagicViewResponse {
    string title = 1;
    repeated MagicViewItem items = 4;
}

message GetArtifactCustomizationChoicesRequest {
    string project_id = 1;
}

message GetArtifactCustomizationChoicesResponse {
    // Structure not clear from JS
}

message ReportContentRequest {
    string project_id = 1;
    string source_id = 2;
    string reason = 3;
}


// Service definition
service LabsTailwindOrchestrationService {
    option (batchexecute_app) = "LabsTailwindUi";
    option (batchexecute_host) = "notebooklm.google.com";
    
    // Artifact operations
    rpc CreateArtifact(CreateArtifactRequest) returns (Artifact) {
        option (rpc_id) = "R7cb6c";
        option (arg_format) = "[%context%, %project_id%, %artifact%]";
    }
    rpc GetArtifact(GetArtifactRequest) returns (Artifact) {
        option (rpc_id) = "v9rmvd";
        option (arg_format) = "[%artifact_id%]";
    }
    rpc UpdateArtifact(UpdateArtifactRequest) returns (Artifact) {
        option (rpc_id) = "rc3d8d";
        option (arg_format) = "[%artifact%, %update_mask%]";
    }
    rpc DeleteArtifact(DeleteArtifactRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "V5N4be";
        option (arg_format) = "[%artifact_id%]";
    }
    rpc ListArtifacts(ListArtifactsRequest) returns (ListArtifactsResponse) {
        option (rpc_id) = "gArtLc";
        option (arg_format) = "[%project_id%, %page_size%, %page_token%]";
    }
    
    // Source operations
    rpc ActOnSources(ActOnSourcesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "yyryJe";
        option (arg_format) = "[%project_id%, %action%, %source_ids%]";
    }
    rpc AddSources(AddSourceRequest) returns (Project) {
        option (rpc_id) = "izAoDd";
        option (arg_format) = "[%sources%, %project_id%]";
    }
    rpc AddTentativeSources(AddTentativeSourcesRequest) returns (AddTentativeSourcesResponse) {
        option (rpc_id) = "o4cbdc";
    }
    rpc CheckSourceFreshness(CheckSourceFreshnessRequest) returns (CheckSourceFreshnessResponse) {
        option (rpc_id) = "yR9Yof";
        option (arg_format) = "[%source_id%]";
    }
    rpc DeleteSources(DeleteSourcesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "tGMBJ";
        option (arg_format) = "[[%source_ids%]]";
    }
    rpc DiscoverSources(DiscoverSourcesRequest) returns (DiscoverSourcesResponse) {
        option (rpc_id) = "Es3dTe";
        option (arg_format) = "[%project_id%, %query%]";
    }
    rpc DiscoverSourcesAsync(DiscoverSourcesAsyncRequest) returns (DiscoverSourcesAsyncResponse) {
        option (rpc_id) = "QA9ei";
    }
    rpc LoadSource(LoadSourceRequest) returns (Source) {
        option (rpc_id) = "hizoJc";
        option (arg_format) = "[%source_id%]";
    }
    rpc MutateSource(MutateSourceRequest) returns (Source) {
        option (rpc_id) = "b7Wfje";
        option (arg_format) = "[%source_id%, %updates%]";
    }
    rpc RefreshSource(RefreshSourceRequest) returns (Source) {
        option (rpc_id) = "FLmJqe";
        option (arg_format) = "[%source_id%]";
    }
    
    // Audio operations
    rpc CreateAudioOverview(CreateAudioOverviewRequest) returns (AudioOverview);
    rpc GetAudioOverview(GetAudioOverviewRequest) returns (AudioOverview);
    rpc DeleteAudioOverview(DeleteAudioOverviewRequest) returns (google.protobuf.Empty);
    
    // Note operations
    rpc CreateNote(CreateNoteRequest) returns (Source);
    rpc DeleteNotes(DeleteNotesRequest) returns (google.protobuf.Empty);
    rpc GetNotes(GetNotesRequest) returns (GetNotesResponse);
    rpc MutateNote(MutateNoteRequest) returns (Source);
    
    // Project operations
    rpc CreateProject(CreateProjectRequest) returns (Project) {
        option (rpc_id) = "CCqFvf";
        option (arg_format) = "[%title%, %emoji%]";
    }
    rpc DeleteProjects(DeleteProjectsRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "WWINqb";
        option (arg_format) = "[%project_ids%]";
    }
    rpc GetProject(GetProjectRequest) returns (Project) {
        option (rpc_id) = "rLM1Ne";
        option (arg_format) = "[%project_id%]";
    }
    rpc ListFeaturedProjects(ListFeaturedProjectsRequest) returns (ListFeaturedProjectsResponse) {
        option (rpc_id) = "ub2Bae";
        option (arg_format) = "[%page_size%, %page_token%]";
    }
    rpc ListRecentlyViewedProjects(ListRecentlyViewedProjectsRequest) returns (ListRecentlyViewedProjectsResponse) {
        option (rpc_id) = "wXbhsf";
        option (arg_format) = "[null, 1, null, [2]]";
        option (chunked_response) = true;
    }
    rpc MutateProject(MutateProjectRequest) returns (Project) {
        option (rpc_id) = "s0tc2d";
        option (arg_format) = "[%project_id%, %updates%]";
    }
    rpc RemoveRecentlyViewedProject(RemoveRecentlyViewedProjectRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "fejl7e";
        option (arg_format) = "[%project_id%]";
    }
    
    // Generation operations
    rpc GenerateDocumentGuides(GenerateDocumentGuidesRequest) returns (GenerateDocumentGuidesResponse);
    rpc GenerateFreeFormStreamed(GenerateFreeFormStreamedRequest) returns (stream GenerateFreeFormStreamedResponse) {
        option (rpc_id) = "laWbsf";
    }
    rpc GenerateMagicView(GenerateMagicViewRequest) returns (GenerateMagicViewResponse) {
        option (rpc_id) = "uK8f7c";
    }
    rpc GenerateNotebookGuide(GenerateNotebookGuideRequest) returns (GenerateNotebookGuideResponse);
    rpc GenerateOutline(GenerateOutlineRequest) returns (GenerateOutlineResponse);
    rpc GenerateReportSuggestions(GenerateReportSuggestionsRequest) returns (GenerateReportSuggestionsResponse) {
        option (rpc_id) = "ciyUvf";
    }
    rpc GetArtifactCustomizationChoices(GetArtifactCustomizationChoicesRequest) returns (GetArtifactCustomizationChoicesResponse) {
        option (rpc_id) = "sqTeoe";
    }
    
    // Analytics and feedback
    rpc GetProjectAnalytics(GetProjectAnalyticsRequest) returns (ProjectAnalytics);
    rpc ReportContent(ReportContentRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "OmVMXc";
    }
    rpc SubmitFeedback(SubmitFeedbackRequest) returns (google.protobuf.Empty);
    
    // Account operations
    rpc GetOrCreateAccount(GetOrCreateAccountRequest) returns (Account);
    rpc MutateAccount(MutateAccountRequest) returns (Account);
}

// Placeholder messages that need to be defined
message CreateProjectRequest {
    string title = 1;
    string emoji = 2;
}

message DeleteProjectsRequest {
    repeated string project_ids = 1;
}

message DeleteSourcesRequest {
    repeated string source_ids = 1;
}

message GetProjectRequest {
    string project_id = 1;
}

message ListRecentlyViewedProjectsRequest {
    google.protobuf.Int32Value limit = 1;
    google.protobuf.Int32Value offset = 2;
    google.protobuf.Int32Value filter = 3;
    repeated int32 options = 4;
}

message MutateProjectRequest {
    string project_id = 1;
    Project updates = 2;
}

message MutateSourceRequest {
    string source_id = 1;
    Source updates = 2;
}

message RemoveRecentlyViewedProjectRequest {
    string project_id = 1;
}

message CheckSourceFreshnessRequest {
    string source_id = 1;
}

message CheckSourceFreshnessResponse {
    bool is_fresh = 1;
    google.protobuf.Timestamp last_checked = 2;
}

message LoadSourceRequest {
    string source_id = 1;
}

message RefreshSourceRequest {
    string source_id = 1;
}

message GenerateDocumentGuidesRequest {
    string project_id = 1;
}

message GenerateNotebookGuideRequest {
    string project_id = 1;
}

message GenerateOutlineRequest {
    string project_id = 1;
}

message SubmitFeedbackRequest {
    string project_id = 1;
    string feedback_type = 2;
    string feedback_text = 3;
}
```

**proto/notebooklm/v1alpha1/rpc_extensions.proto**

No changes were identified from the Javascript for this file. It remains the same.

```proto
// RPC extensions for NotebookLM batchexecute API
syntax = "proto3";

import "google/protobuf/descriptor.proto";

package notebooklm.v1alpha1;

option go_package = "github.com/tmc/nlm/gen/notebooklm/v1alpha1;notebooklm";

// Custom options for RPC methods to define batchexecute metadata
extend google.protobuf.MethodOptions {
  // The RPC endpoint ID used in batchexecute calls
  string rpc_id = 51000;
  
  // The argument encoding format for the RPC
  // Can contain placeholders that map to request message fields
  // Examples:
  //   "[null, %limit%]" - simple format with one field
  //   "[null, %limit%, null, %options%]" - format with multiple fields
  //   "[[%sources%], %project_id%]" - nested format
  string arg_format = 51001;
  
  // Whether this RPC uses chunked response format
  bool chunked_response = 51002;
  
  // Custom response parser hint
  string response_parser = 51003;
}

// Custom options for message fields to define encoding behavior
extend google.protobuf.FieldOptions {
  // How to encode this field in batchexecute format
  // Examples:
  //   "array" - encode as array even if single value
  //   "string" - always encode as string
  //   "number" - encode as number
  //   "null_if_empty" - encode as null if field is empty/zero
  string batchexecute_encoding = 51010;
  
  // The key to use when this field appears in argument format
  // e.g., if arg_format is "[null, %page_size%]" then a field with
  // arg_key = "page_size" will be substituted there
  string arg_key = 51011;
}

// Custom options for services
extend google.protobuf.ServiceOptions {
  // The batchexecute app name for this service
  string batchexecute_app = 51020;
  
  // The host for this service
  string batchexecute_host = 51021;
}

// Encoding hints for batchexecute format
message BatchExecuteEncoding {
  // How to handle empty/zero values
  enum EmptyValueHandling {
    EMPTY_VALUE_DEFAULT = 0;
    EMPTY_VALUE_NULL = 1;
    EMPTY_VALUE_OMIT = 2;
    EMPTY_VALUE_EMPTY_ARRAY = 3;
  }
  
  // How to encode arrays
  enum ArrayEncoding {
    ARRAY_DEFAULT = 0;
    ARRAY_NESTED = 1;      // [[item1], [item2]]
    ARRAY_FLAT = 2;        // [item1, item2]
    ARRAY_WRAPPED = 3;     // [[[item1, item2]]]
  }
}
```

**proto/notebooklm/v1alpha1/sharing.proto**

No changes were identified from the Javascript for this file. It remains the same.

```proto
// Sharing service definitions discovered from JavaScript analysis
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "notebooklm/v1alpha1/notebooklm.proto";
import "notebooklm/v1alpha1/rpc_extensions.proto";

package notebooklm.v1alpha1;

option go_package = "github.com/tmc/nlm/gen/notebooklm/v1alpha1;notebooklm";

// Sharing-related messages

message ShareAudioRequest {
    repeated int32 share_options = 1;  // e.g., [0] for private, [1] for public
    string project_id = 2;
}

message ShareAudioResponse {
    repeated string share_info = 1;  // [share_url, share_id]
}

message GetProjectDetailsRequest {
    string share_id = 1;
}

message ProjectDetails {
    string project_id = 1;
    string title = 2;
    string emoji = 3;
    string owner_name = 4;
    bool is_public = 5;
    google.protobuf.Timestamp shared_at = 6;
    repeated SourceSummary sources = 7;
}

message SourceSummary {
    string source_id = 1;
    string title = 2;
    SourceType source_type = 3;
}

message ShareProjectRequest {
    string project_id = 1;
    ShareSettings settings = 2;
}

message ShareSettings {
    bool is_public = 1;
    repeated string allowed_emails = 2;
    bool allow_comments = 3;
    bool allow_downloads = 4;
    google.protobuf.Timestamp expiry_time = 5;
}

message ShareProjectResponse {
    string share_url = 1;
    string share_id = 2;
    ShareSettings settings = 3;
}

// Guidebook-related messages
message Guidebook {
    string guidebook_id = 1;
    string project_id = 2;
    string title = 3;
    string content = 4;
    GuidebookStatus status = 5;
    google.protobuf.Timestamp published_at = 6;
}

enum GuidebookStatus {
    GUIDEBOOK_STATUS_UNSPECIFIED = 0;
    GUIDEBOOK_STATUS_DRAFT = 1;
    GUIDEBOOK_STATUS_PUBLISHED = 2;
    GUIDEBOOK_STATUS_ARCHIVED = 3;
}

message DeleteGuidebookRequest {
    string guidebook_id = 1;
}

message GetGuidebookRequest {
    string guidebook_id = 1;
}

message ListRecentlyViewedGuidebooksRequest {
    int32 page_size = 1;
    string page_token = 2;
}

message ListRecentlyViewedGuidebooksResponse {
    repeated Guidebook guidebooks = 1;
    string next_page_token = 2;
}

message PublishGuidebookRequest {
    string guidebook_id = 1;
    PublishSettings settings = 2;
}

message PublishSettings {
    bool is_public = 1;
    repeated string tags = 2;
}

message PublishGuidebookResponse {
    Guidebook guidebook = 1;
    string public_url = 2;
}

message GetGuidebookDetailsRequest {
    string guidebook_id = 1;
}

message GuidebookDetails {
    Guidebook guidebook = 1;
    repeated GuidebookSection sections = 2;
    GuidebookAnalytics analytics = 3;
}

message GuidebookSection {
    string section_id = 1;
    string title = 2;
    string content = 3;
    int32 order = 4;
}

message GuidebookAnalytics {
    int32 view_count = 1;
    int32 share_count = 2;
    google.protobuf.Timestamp last_viewed = 3;
}

message ShareGuidebookRequest {
    string guidebook_id = 1;
    ShareSettings settings = 2;
}

message ShareGuidebookResponse {
    string share_url = 1;
    string share_id = 2;
}

message GuidebookGenerateAnswerRequest {
    string guidebook_id = 1;
    string question = 2;
    GenerateAnswerSettings settings = 3;
}

message GenerateAnswerSettings {
    int32 max_length = 1;
    float temperature = 2;
    bool include_sources = 3;
}

message GuidebookGenerateAnswerResponse {
    string answer = 1;
    repeated SourceReference sources = 2;
    float confidence_score = 3;
}

message SourceReference {
    string source_id = 1;
    string title = 2;
    string excerpt = 3;
}

// Service definitions
service LabsTailwindSharingService {
    // Audio sharing
    rpc ShareAudio(ShareAudioRequest) returns (ShareAudioResponse) {
        option (rpc_id) = "RGP97b";
        option (arg_format) = "[%share_options%, %project_id%]";
    }
    
    // Project sharing
    rpc GetProjectDetails(GetProjectDetailsRequest) returns (ProjectDetails) {
        option (rpc_id) = "JFMDGd";
        option (arg_format) = "[%share_id%]";
    }
    rpc ShareProject(ShareProjectRequest) returns (ShareProjectResponse) {
        option (rpc_id) = "QDyure";
        option (arg_format) = "[%project_id%, %settings%]";
    }
}

service LabsTailwindGuidebooksService {
    // Guidebook operations
    rpc DeleteGuidebook(DeleteGuidebookRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "ARGkVc";
        option (arg_format) = "[%guidebook_id%]";
    }
    rpc GetGuidebook(GetGuidebookRequest) returns (Guidebook) {
        option (rpc_id) = "EYqtU";
        option (arg_format) = "[%guidebook_id%]";
    }
    rpc ListRecentlyViewedGuidebooks(ListRecentlyViewedGuidebooksRequest) returns (ListRecentlyViewedGuidebooksResponse) {
        option (rpc_id) = "YJBpHc";
        option (arg_format) = "[%page_size%, %page_token%]";
    }
    rpc PublishGuidebook(PublishGuidebookRequest) returns (PublishGuidebookResponse) {
        option (rpc_id) = "R6smae";
        option (arg_format) = "[%guidebook_id%, %settings%]";
    }
    rpc GetGuidebookDetails(GetGuidebookDetailsRequest) returns (GuidebookDetails) {
        option (rpc_id) = "LJyzeb";
        option (arg_format) = "[%guidebook_id%]";
    }
    rpc ShareGuidebook(ShareGuidebookRequest) returns (ShareGuidebookResponse) {
        option (rpc_id) = "OTl0K";
        option (arg_format) = "[%guidebook_id%, %settings%]";
    }
    rpc GuidebookGenerateAnswer(GuidebookGenerateAnswerRequest) returns (GuidebookGenerateAnswerResponse) {
        option (rpc_id) = "itA0pc";
        option (arg_format) = "[%guidebook_id%, %question%, %settings%]";
    }
}
```