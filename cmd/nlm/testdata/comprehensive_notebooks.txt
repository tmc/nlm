# Comprehensive notebook management tests

# Setup - ensure clean state with mock credentials
> env HOME=$WORK/test-home
> env NLM_AUTH_TOKEN=mock-token
> env NLM_COOKIES=mock-cookies
> mkdir -p $WORK/test-home/.nlm
> echo 'NLM_AUTH_TOKEN="mock-token"' > $WORK/test-home/.nlm/env
> echo 'NLM_COOKIES="mock-cookies"' >> $WORK/test-home/.nlm/env

# Test 1: List notebooks with source count display
> exec ./nlm_test ls
> stdout 'ID\s+TITLE\s+SOURCES\s+LAST UPDATED'
> stdout '\d{8}-\d{4}-\d{4}-\d{4}-\d{12}\s+.*\s+\d+\s+\d{4}-\d{2}-\d{2}'

# Test 2: Create new notebook
> exec ./nlm_test create "Test Notebook ðŸ“š"
> stdout 'Created notebook:'
> stdout 'Test Notebook ðŸ“š'
> stdout '\d{8}-\d{4}-\d{4}-\d{4}-\d{12}'

# Test 3: Create notebook with custom emoji
> exec ./nlm_test create "Research Project" --emoji "ðŸ”¬"
> stdout 'Created notebook:'
> stdout 'ðŸ”¬ Research Project'

# Test 4: Delete notebook (with mock ID)
> exec ./nlm_test rm mock-project-001 -y
> stdout 'Deleted notebook'

# Test 5: Rename notebook
> exec ./nlm_test rename mock-project-002 "Updated Title"
> stdout 'Renamed notebook'

# Test 6: List notebooks with pagination (offset and limit)
> exec ./nlm_test ls --offset 0 --limit 5
> stdout 'ID\s+TITLE\s+SOURCES'
> ! stderr 'error'

# Test 7: Get specific notebook info
> exec ./nlm_test info mock-project-001
> stdout 'Title:'
> stdout 'Sources:'
> stdout 'Created:'

# Test 8: Share notebook
> exec ./nlm_test share mock-project-001
> stdout 'https://notebooklm.google.com/notebook/'

# Test 9: Error handling - invalid notebook ID
> ! exec ./nlm_test rm invalid-id -y
> stderr 'not found|invalid'

# Test 10: Help text verification
> exec ./nlm_test help
> stdout 'Usage: nlm'
> stdout 'list.*List notebooks'
> stdout 'create.*Create a new notebook'
> stdout 'sources.*List sources'