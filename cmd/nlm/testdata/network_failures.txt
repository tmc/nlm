# Test network failure scenarios and graceful error handling
# This test suite validates CLI behavior under various network conditions:
# - Timeouts, connection failures, DNS issues
# - Invalid responses, partial responses
# - Authentication server unavailable
# - Retry behavior and error message quality

# === SECTION 1: Commands that work without network ===
# These commands should always work regardless of network state

# Test help works offline
exec ./nlm_test help
stderr 'Usage: nlm <command>'
! stderr 'network'
! stderr 'timeout'
! stderr 'connection'
! stderr 'DNS'

exec ./nlm_test -h  
stderr 'Usage: nlm <command>'
! stderr 'network'
! stderr 'timeout'
! stderr 'connection'

# Test validation errors don't require network
! exec ./nlm_test create
stderr 'usage: nlm create <title>'
! stderr 'network'
! stderr 'timeout'
! stderr 'connection'

! exec ./nlm_test add
stderr 'usage: nlm add <notebook-id> <file>'
! stderr 'network'
! stderr 'timeout'

# === SECTION 2: Unauthenticated commands fail fast ===
# Without auth, commands should show auth error before attempting network

! exec ./nlm_test list
stderr 'Authentication required for.*list.*Run.*nlm auth.*first'
! stderr 'network'
! stderr 'timeout'
! stderr 'connection refused'
! stderr 'DNS'

! exec ./nlm_test create test-notebook
stderr 'Authentication required for.*create.*Run.*nlm auth.*first'
! stderr 'network'
! stderr 'timeout'

# === SECTION 3: Network timeout scenarios ===
# Test that commands handle network timeouts gracefully
# Using invalid auth tokens simulates various API failure scenarios

# Test 3.1: List command with simulated timeout (invalid auth)
env NLM_AUTH_TOKEN=fake-token-invalid-should-cause-network-error
env NLM_COOKIES=fake-cookies-invalid-should-cause-network-error
! exec ./nlm_test list
# With fake tokens, should get parsing errors, not panic or hang
! stderr 'panic'
! stderr 'SIGPIPE' 
! stderr 'broken pipe.*panic'
! stderr 'runtime error'
! stderr 'fatal error'
# Should show API error instead of network error  
stderr 'API error|Authentication|Unauthenticated'

# Test 3.2: Create command with connection failure simulation
env NLM_AUTH_TOKEN=fake-token-invalid
env NLM_COOKIES=fake-cookies-invalid
! exec ./nlm_test create 'Test Notebook'
! stderr 'panic'
! stderr 'runtime error'
# May show parsing errors, API errors, or connection errors, but should not crash

# === SECTION 4: Connection refused errors ===
# Test handling when server refuses connection

# Test 4.1: Sources command - should handle connection errors gracefully  
env NLM_AUTH_TOKEN=fake-token-connection-refused
env NLM_COOKIES=fake-cookies-connection-refused
! exec ./nlm_test sources invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'

# Test 4.2: Add command with URL when connection refused
env NLM_AUTH_TOKEN=fake-token-connection-refused
env NLM_COOKIES=fake-cookies-connection-refused
! exec ./nlm_test add invalid-notebook-id https://example.com
stdout 'Adding source from URL'
! stderr 'panic'
! stderr 'runtime error'
# May fail with connection error but should not crash

# === SECTION 5: Invalid server responses ===
# Test handling of malformed or unexpected API responses

# Test 5.1: Add command file handling with invalid response
# Skip file testing for now - requires proper file setup
# File input testing would need txtar or file setup

# Test 5.2: Remove operations with server errors
env NLM_AUTH_TOKEN=fake-token-server-error
env NLM_COOKIES=fake-cookies-server-error
! exec ./nlm_test rm invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'

# Test 5.3: Remove source with malformed response
env NLM_AUTH_TOKEN=fake-token-malformed-json
env NLM_COOKIES=fake-cookies-malformed-json
! exec ./nlm_test rm-source invalid-notebook-id invalid-source-id
! stderr 'panic'
! stderr 'runtime error'

# === SECTION 6: DNS resolution failures ===
# Test handling when DNS lookup fails

# Test 6.1: Commands should still validate args without DNS
! exec ./nlm_test notes invalid-notebook-id
# Notes command gets API error
stderr 'API error|Authentication|Unauthenticated'
! stderr 'panic'
! stderr 'DNS'
! stderr 'lookup'

# Test 6.2: Note operations with DNS failure simulation
env NLM_AUTH_TOKEN=fake-token-dns-failure
env NLM_COOKIES=fake-cookies-dns-failure
! exec ./nlm_test new-note invalid-notebook-id 'Test Note Title'
! stderr 'panic'
! stderr 'runtime error'
# May show network errors but should complete

# Test 6.3: Validation happens before network attempts
! exec ./nlm_test rm-note invalid-note-id
stderr 'usage: nlm rm-note <notebook-id> <note-id>'
! stderr 'panic'
! stderr 'network'
! stderr 'DNS'

# === SECTION 7: Partial response handling ===
# Test handling when server returns incomplete data

# Test 7.1: Audio commands with partial responses
env NLM_AUTH_TOKEN=fake-token-partial-response
env NLM_COOKIES=fake-cookies-partial-response
! exec ./nlm_test audio-get invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'
# Should handle incomplete JSON gracefully - shows API error
stderr 'API error|Authentication|Unauthenticated|execute rpc'

# Test 7.2: Audio creation with connection drop mid-response
env NLM_AUTH_TOKEN=fake-token-connection-drop
env NLM_COOKIES=fake-cookies-connection-drop
! exec ./nlm_test audio-create invalid-notebook-id 'Test audio instructions'
! stderr 'panic'
! stderr 'runtime error'

# Test 7.3: Audio operations should not hang on network issues
env NLM_AUTH_TOKEN=fake-token-slow-response
env NLM_COOKIES=fake-cookies-slow-response
! exec ./nlm_test audio-rm invalid-notebook-id
! stderr 'panic'

env NLM_AUTH_TOKEN=fake-token-timeout
env NLM_COOKIES=fake-cookies-timeout
! exec ./nlm_test audio-share invalid-notebook-id
! stderr 'panic'

# === SECTION 8: Authentication server unavailable ===
# Test when auth endpoints are down

# Test 8.1: Generation commands with auth server down
env NLM_AUTH_TOKEN=fake-token-auth-server-down
env NLM_COOKIES=fake-cookies-auth-server-down
! exec ./nlm_test generate-guide invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'
# Should show connection or auth error

env NLM_AUTH_TOKEN=fake-token-auth-unavailable
env NLM_COOKIES=fake-cookies-auth-unavailable
! exec ./nlm_test generate-outline invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'

env NLM_AUTH_TOKEN=fake-token-auth-timeout
env NLM_COOKIES=fake-cookies-auth-timeout
! exec ./nlm_test generate-section invalid-notebook-id
! stderr 'panic'
! stderr 'runtime error'

# === SECTION 9: Retry behavior testing ===
# Test that commands don't retry indefinitely

# Test 9.1: Source operations with retry scenarios
env NLM_AUTH_TOKEN=fake-token-retry-exhausted
env NLM_COOKIES=fake-cookies-retry-exhausted
! exec ./nlm_test rename-source invalid-source-id 'New Source Name'
! stderr 'panic'
! stderr 'runtime error'
# Should fail after reasonable retry attempts

# Test 9.2: Refresh with transient failures
env NLM_AUTH_TOKEN=fake-token-transient-failure
env NLM_COOKIES=fake-cookies-transient-failure
! exec ./nlm_test refresh-source invalid-source-id
! stderr 'panic'
! stderr 'runtime error'

# Test 9.3: Analytics command validation (known issue with RPC ID)
env NLM_AUTH_TOKEN=fake-token-invalid
env NLM_COOKIES=fake-cookies-invalid
! exec ./nlm_test analytics invalid-notebook-id
stderr 'API error|Authentication|Unauthenticated|execute rpc'
! stderr 'panic'
! stderr 'network'

# === SECTION 10: Debug mode network failures ===
# Debug mode should provide helpful info without crashing

# Test 10.1: Debug mode with network timeout
env NLM_AUTH_TOKEN=fake-token-network-timeout
env NLM_COOKIES=fake-cookies-network-timeout
! exec ./nlm_test -debug list
stderr 'nlm: debug mode enabled'
! stderr 'panic'
! stderr 'runtime error'
# Debug output should help diagnose network issues - shows API error
stderr 'API error|Authentication|execute rpc'

# Test 10.2: Profile-specific debug with connection issues
env NLM_AUTH_TOKEN=fake-token-connection-error
env NLM_COOKIES=fake-cookies-connection-error
! exec ./nlm_test -debug -profile test-profile list
stderr 'nlm: debug mode enabled'
stderr 'nlm: using Chrome profile: test.*file'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# === SECTION 11: Partial authentication scenarios ===
# Test behavior when auth is incomplete

# Test 11.1: Missing cookies
env NLM_AUTH_TOKEN=fake-token-valid
env NLM_COOKIES=
! exec ./nlm_test list
stderr 'Authentication required'
! stderr 'panic'

# Test 11.2: Missing auth token
env NLM_AUTH_TOKEN=
env NLM_COOKIES=fake-cookies-valid
! exec ./nlm_test list  
stderr 'Authentication required'
! stderr 'panic'

# === SECTION 12: URL and file handling with network issues ===
# Test various URL/file scenarios don't crash on network errors

# Test 12.1: Plain text treated as content, not URL
env NLM_AUTH_TOKEN=fake-token-url-parse-error
env NLM_COOKIES=fake-cookies-url-parse-error
! exec ./nlm_test add invalid-notebook-id 'not-a-url'
stdout 'Adding text content as source'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 12.2: Unsupported URL schemes handled gracefully
env NLM_AUTH_TOKEN=fake-token-invalid-scheme
env NLM_COOKIES=fake-cookies-invalid-scheme
! exec ./nlm_test add invalid-notebook-id 'ftp://invalid-scheme.example.com/test'
stdout 'Adding text content as source'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 12.3: Malformed URLs don't crash
env NLM_AUTH_TOKEN=fake-token-malformed-url
env NLM_COOKIES=fake-cookies-malformed-url
! exec ./nlm_test add invalid-notebook-id 'http://[invalid-ipv6'
stdout 'Adding source from URL'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 12.4: MIME type with network failures
env NLM_AUTH_TOKEN=fake-token-mime-error
env NLM_COOKIES=fake-cookies-mime-error
! exec ./nlm_test -mime application/json add invalid-notebook-id temp/test.txt
stdout 'Adding text content as source'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 12.5: Very long URLs handled safely
env NLM_AUTH_TOKEN=fake-token-long-url
env NLM_COOKIES=fake-cookies-long-url
! exec ./nlm_test add invalid-notebook-id 'https://example.com/very/long/path/that/might/cause/buffer/issues/in/some/implementations/test/test/test/test/test/test/test/test/test'
stdout 'Adding source from URL'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# === SECTION 13: File handling edge cases with network errors ===

# Create temp directory for file tests
exec mkdir -p temp

# Test 13.1: Nonexistent file defaults to text content
env NLM_AUTH_TOKEN=fake-token-file-not-found
env NLM_COOKIES=fake-cookies-file-not-found
! exec ./nlm_test add invalid-notebook-id nonexistent-file.txt
stdout 'Adding text content as source'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 13.2: Empty file handling with network error
exec touch temp/empty.txt
env NLM_AUTH_TOKEN=fake-token-empty-file
env NLM_COOKIES=fake-cookies-empty-file
! exec ./nlm_test add invalid-notebook-id temp/empty.txt
stdout 'Adding source from file'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# Test 13.3: Binary file with network issues
exec sh -c 'printf "\x00\x01\x02\x03binary data\x04\x05" > temp/binary.dat'
env NLM_AUTH_TOKEN=fake-token-binary-upload
env NLM_COOKIES=fake-cookies-binary-upload
! exec ./nlm_test add invalid-notebook-id temp/binary.dat
stdout 'Adding source from file'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'

# === SECTION 14: Timing and timeout verification ===
# Test that commands complete within reasonable time

# Test 14.1: Large file upload with network timeout
exec sh -c 'dd if=/dev/zero bs=1024 count=100 2>/dev/null > temp/large.txt'
env NLM_AUTH_TOKEN=fake-token-upload-timeout
env NLM_COOKIES=fake-cookies-upload-timeout
! exec ./nlm_test add invalid-notebook-id temp/large.txt
stdout 'Adding source from file'
! stderr 'panic'
! stderr 'runtime error'
stderr 'API error|Authentication|execute rpc'
# Should complete without hanging indefinitely

# Test 14.2: URL fetch with slow response
env NLM_AUTH_TOKEN=fake-token-slow-download
env NLM_COOKIES=fake-cookies-slow-download
! exec ./nlm_test add invalid-notebook-id 'https://example.com/slow-response'
stdout 'Adding source from URL'
! stderr 'panic'
# Should timeout gracefully

# === SECTION 15: Concurrent request handling ===
# Test that multiple failed requests don't cause race conditions

# Test 15.1: Quick successive commands
env NLM_AUTH_TOKEN=fake-token-concurrent
env NLM_COOKIES=fake-cookies-concurrent
! exec ./nlm_test list
! stderr 'panic'
! stderr 'race'
! stderr 'concurrent map'
stderr 'API error|Authentication|execute rpc'

# Clean up test files
exec rm -rf temp

# === SUMMARY ===
# This test suite ensures the nlm CLI:
# 1. Never panics on network failures
# 2. Provides helpful error messages
# 3. Validates input before network attempts
# 4. Handles timeouts gracefully
# 5. Works offline for non-network commands
# 6. Completes within reasonable time
# 7. Handles partial/malformed responses
# 8. Manages authentication failures properly