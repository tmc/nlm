// GENERATION_BEHAVIOR: overwrite
// Code generated by protoc-gen-anything. DO NOT EDIT.
// source: notebooklm/v1alpha1/orchestration.proto

package service

import (
	"context"
	"fmt"

	"github.com/tmc/nlm/gen/method"
	notebooklmv1alpha1 "github.com/tmc/nlm/gen/notebooklm/v1alpha1"
	"github.com/tmc/nlm/internal/batchexecute"
	"github.com/tmc/nlm/internal/beprotojson"
	"github.com/tmc/nlm/internal/rpc"
	"google.golang.org/protobuf/types/known/emptypb"
)

// LabsTailwindOrchestrationServiceClient is a generated client for the LabsTailwindOrchestrationService service.
type LabsTailwindOrchestrationServiceClient struct {
	rpcClient *rpc.Client
}

// NewLabsTailwindOrchestrationServiceClient creates a new client for the LabsTailwindOrchestrationService service.
func NewLabsTailwindOrchestrationServiceClient(authToken, cookies string, opts ...batchexecute.Option) *LabsTailwindOrchestrationServiceClient {
	return &LabsTailwindOrchestrationServiceClient{
		rpcClient: rpc.New(authToken, cookies, opts...),
	}
}

// CreateArtifact calls the CreateArtifact RPC method.
func (c *LabsTailwindOrchestrationServiceClient) CreateArtifact(ctx context.Context, req *notebooklmv1alpha1.CreateArtifactRequest) (*notebooklmv1alpha1.Artifact, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "xpWGLf",
		Args: method.EncodeCreateArtifactArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("CreateArtifact: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Artifact
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("CreateArtifact: unmarshal response: %w", err)
	}

	return &result, nil
}

// GetArtifact calls the GetArtifact RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetArtifact(ctx context.Context, req *notebooklmv1alpha1.GetArtifactRequest) (*notebooklmv1alpha1.Artifact, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "BnLyuf",
		Args: method.EncodeGetArtifactArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("GetArtifact: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Artifact
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("GetArtifact: unmarshal response: %w", err)
	}

	return &result, nil
}

// UpdateArtifact calls the UpdateArtifact RPC method.
func (c *LabsTailwindOrchestrationServiceClient) UpdateArtifact(ctx context.Context, req *notebooklmv1alpha1.UpdateArtifactRequest) (*notebooklmv1alpha1.Artifact, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "DJezBc",
		Args: method.EncodeUpdateArtifactArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("UpdateArtifact: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Artifact
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("UpdateArtifact: unmarshal response: %w", err)
	}

	return &result, nil
}

// DeleteArtifact calls the DeleteArtifact RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DeleteArtifact(ctx context.Context, req *notebooklmv1alpha1.DeleteArtifactRequest) (*emptypb.Empty, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "WxBZtb",
		Args: method.EncodeDeleteArtifactArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("DeleteArtifact: %w", err)
	}

	// Decode the response
	var result emptypb.Empty
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("DeleteArtifact: unmarshal response: %w", err)
	}

	return &result, nil
}

// ListArtifacts calls the ListArtifacts RPC method.
func (c *LabsTailwindOrchestrationServiceClient) ListArtifacts(ctx context.Context, req *notebooklmv1alpha1.ListArtifactsRequest) (*notebooklmv1alpha1.ListArtifactsResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "LfTXoe",
		Args: method.EncodeListArtifactsArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ListArtifacts: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ListArtifactsResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ListArtifacts: unmarshal response: %w", err)
	}

	return &result, nil
}

// ActOnSources calls the ActOnSources RPC method.
func (c *LabsTailwindOrchestrationServiceClient) ActOnSources(ctx context.Context, req *notebooklmv1alpha1.ActOnSourcesRequest) (*emptypb.Empty, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "yyryJe",
		Args: method.EncodeActOnSourcesArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ActOnSources: %w", err)
	}

	// Decode the response
	var result emptypb.Empty
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ActOnSources: unmarshal response: %w", err)
	}

	return &result, nil
}

// AddSources calls the AddSources RPC method.
func (c *LabsTailwindOrchestrationServiceClient) AddSources(ctx context.Context, req *notebooklmv1alpha1.AddSourceRequest) (*notebooklmv1alpha1.Project, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "izAoDd",
		Args: method.EncodeAddSourcesArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("AddSources: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Project
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("AddSources: unmarshal response: %w", err)
	}

	return &result, nil
}

// CheckSourceFreshness calls the CheckSourceFreshness RPC method.
func (c *LabsTailwindOrchestrationServiceClient) CheckSourceFreshness(ctx context.Context, req *notebooklmv1alpha1.CheckSourceFreshnessRequest) (*notebooklmv1alpha1.CheckSourceFreshnessResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "yR9Yof",
		Args: method.EncodeCheckSourceFreshnessArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("CheckSourceFreshness: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.CheckSourceFreshnessResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("CheckSourceFreshness: unmarshal response: %w", err)
	}

	return &result, nil
}

// DeleteSources calls the DeleteSources RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DeleteSources(ctx context.Context, req *notebooklmv1alpha1.DeleteSourcesRequest) (*emptypb.Empty, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "tGMBJ",
		Args: method.EncodeDeleteSourcesArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("DeleteSources: %w", err)
	}

	// Decode the response
	var result emptypb.Empty
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("DeleteSources: unmarshal response: %w", err)
	}

	return &result, nil
}

// DiscoverSources calls the DiscoverSources RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DiscoverSources(ctx context.Context, req *notebooklmv1alpha1.DiscoverSourcesRequest) (*notebooklmv1alpha1.DiscoverSourcesResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "qXyaNe",
		Args: method.EncodeDiscoverSourcesArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("DiscoverSources: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.DiscoverSourcesResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("DiscoverSources: unmarshal response: %w", err)
	}

	return &result, nil
}

// LoadSource calls the LoadSource RPC method.
func (c *LabsTailwindOrchestrationServiceClient) LoadSource(ctx context.Context, req *notebooklmv1alpha1.LoadSourceRequest) (*notebooklmv1alpha1.Source, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "hizoJc",
		Args: method.EncodeLoadSourceArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("LoadSource: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Source
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("LoadSource: unmarshal response: %w", err)
	}

	return &result, nil
}

// MutateSource calls the MutateSource RPC method.
func (c *LabsTailwindOrchestrationServiceClient) MutateSource(ctx context.Context, req *notebooklmv1alpha1.MutateSourceRequest) (*notebooklmv1alpha1.Source, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "b7Wfje",
		Args: method.EncodeMutateSourceArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("MutateSource: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Source
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("MutateSource: unmarshal response: %w", err)
	}

	return &result, nil
}

// RefreshSource calls the RefreshSource RPC method.
func (c *LabsTailwindOrchestrationServiceClient) RefreshSource(ctx context.Context, req *notebooklmv1alpha1.RefreshSourceRequest) (*notebooklmv1alpha1.Source, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "FLmJqe",
		Args: method.EncodeRefreshSourceArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("RefreshSource: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Source
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("RefreshSource: unmarshal response: %w", err)
	}

	return &result, nil
}

// CreateAudioOverview calls the CreateAudioOverview RPC method.
func (c *LabsTailwindOrchestrationServiceClient) CreateAudioOverview(ctx context.Context, req *notebooklmv1alpha1.CreateAudioOverviewRequest) (*notebooklmv1alpha1.AudioOverview, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("CreateAudioOverview: RPC ID not defined in proto")
}

// GetAudioOverview calls the GetAudioOverview RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetAudioOverview(ctx context.Context, req *notebooklmv1alpha1.GetAudioOverviewRequest) (*notebooklmv1alpha1.AudioOverview, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GetAudioOverview: RPC ID not defined in proto")
}

// DeleteAudioOverview calls the DeleteAudioOverview RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DeleteAudioOverview(ctx context.Context, req *notebooklmv1alpha1.DeleteAudioOverviewRequest) (*emptypb.Empty, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("DeleteAudioOverview: RPC ID not defined in proto")
}

// CreateNote calls the CreateNote RPC method.
func (c *LabsTailwindOrchestrationServiceClient) CreateNote(ctx context.Context, req *notebooklmv1alpha1.CreateNoteRequest) (*notebooklmv1alpha1.Source, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("CreateNote: RPC ID not defined in proto")
}

// DeleteNotes calls the DeleteNotes RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DeleteNotes(ctx context.Context, req *notebooklmv1alpha1.DeleteNotesRequest) (*emptypb.Empty, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("DeleteNotes: RPC ID not defined in proto")
}

// GetNotes calls the GetNotes RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetNotes(ctx context.Context, req *notebooklmv1alpha1.GetNotesRequest) (*notebooklmv1alpha1.GetNotesResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GetNotes: RPC ID not defined in proto")
}

// MutateNote calls the MutateNote RPC method.
func (c *LabsTailwindOrchestrationServiceClient) MutateNote(ctx context.Context, req *notebooklmv1alpha1.MutateNoteRequest) (*notebooklmv1alpha1.Source, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("MutateNote: RPC ID not defined in proto")
}

// CreateProject calls the CreateProject RPC method.
func (c *LabsTailwindOrchestrationServiceClient) CreateProject(ctx context.Context, req *notebooklmv1alpha1.CreateProjectRequest) (*notebooklmv1alpha1.Project, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "CCqFvf",
		Args: method.EncodeCreateProjectArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("CreateProject: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Project
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("CreateProject: unmarshal response: %w", err)
	}

	return &result, nil
}

// DeleteProjects calls the DeleteProjects RPC method.
func (c *LabsTailwindOrchestrationServiceClient) DeleteProjects(ctx context.Context, req *notebooklmv1alpha1.DeleteProjectsRequest) (*emptypb.Empty, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "WWINqb",
		Args: method.EncodeDeleteProjectsArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("DeleteProjects: %w", err)
	}

	// Decode the response
	var result emptypb.Empty
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("DeleteProjects: unmarshal response: %w", err)
	}

	return &result, nil
}

// GetProject calls the GetProject RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetProject(ctx context.Context, req *notebooklmv1alpha1.GetProjectRequest) (*notebooklmv1alpha1.Project, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "rLM1Ne",
		Args: method.EncodeGetProjectArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("GetProject: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Project
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("GetProject: unmarshal response: %w", err)
	}

	return &result, nil
}

// ListFeaturedProjects calls the ListFeaturedProjects RPC method.
func (c *LabsTailwindOrchestrationServiceClient) ListFeaturedProjects(ctx context.Context, req *notebooklmv1alpha1.ListFeaturedProjectsRequest) (*notebooklmv1alpha1.ListFeaturedProjectsResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "nS9Qlc",
		Args: method.EncodeListFeaturedProjectsArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ListFeaturedProjects: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ListFeaturedProjectsResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ListFeaturedProjects: unmarshal response: %w", err)
	}

	return &result, nil
}

// ListRecentlyViewedProjects calls the ListRecentlyViewedProjects RPC method.
func (c *LabsTailwindOrchestrationServiceClient) ListRecentlyViewedProjects(ctx context.Context, req *notebooklmv1alpha1.ListRecentlyViewedProjectsRequest) (*notebooklmv1alpha1.ListRecentlyViewedProjectsResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "wXbhsf",
		Args: method.EncodeListRecentlyViewedProjectsArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ListRecentlyViewedProjects: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ListRecentlyViewedProjectsResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ListRecentlyViewedProjects: unmarshal response: %w", err)
	}

	return &result, nil
}

// MutateProject calls the MutateProject RPC method.
func (c *LabsTailwindOrchestrationServiceClient) MutateProject(ctx context.Context, req *notebooklmv1alpha1.MutateProjectRequest) (*notebooklmv1alpha1.Project, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "s0tc2d",
		Args: method.EncodeMutateProjectArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("MutateProject: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.Project
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("MutateProject: unmarshal response: %w", err)
	}

	return &result, nil
}

// RemoveRecentlyViewedProject calls the RemoveRecentlyViewedProject RPC method.
func (c *LabsTailwindOrchestrationServiceClient) RemoveRecentlyViewedProject(ctx context.Context, req *notebooklmv1alpha1.RemoveRecentlyViewedProjectRequest) (*emptypb.Empty, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "fejl7e",
		Args: method.EncodeRemoveRecentlyViewedProjectArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("RemoveRecentlyViewedProject: %w", err)
	}

	// Decode the response
	var result emptypb.Empty
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("RemoveRecentlyViewedProject: unmarshal response: %w", err)
	}

	return &result, nil
}

// GenerateDocumentGuides calls the GenerateDocumentGuides RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GenerateDocumentGuides(ctx context.Context, req *notebooklmv1alpha1.GenerateDocumentGuidesRequest) (*notebooklmv1alpha1.GenerateDocumentGuidesResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GenerateDocumentGuides: RPC ID not defined in proto")
}

// GenerateFreeFormStreamed calls the GenerateFreeFormStreamed RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GenerateFreeFormStreamed(ctx context.Context, req *notebooklmv1alpha1.GenerateFreeFormStreamedRequest) (*notebooklmv1alpha1.GenerateFreeFormStreamedResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GenerateFreeFormStreamed: RPC ID not defined in proto")
}

// GenerateNotebookGuide calls the GenerateNotebookGuide RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GenerateNotebookGuide(ctx context.Context, req *notebooklmv1alpha1.GenerateNotebookGuideRequest) (*notebooklmv1alpha1.GenerateNotebookGuideResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GenerateNotebookGuide: RPC ID not defined in proto")
}

// GenerateOutline calls the GenerateOutline RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GenerateOutline(ctx context.Context, req *notebooklmv1alpha1.GenerateOutlineRequest) (*notebooklmv1alpha1.GenerateOutlineResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GenerateOutline: RPC ID not defined in proto")
}

// GenerateReportSuggestions calls the GenerateReportSuggestions RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GenerateReportSuggestions(ctx context.Context, req *notebooklmv1alpha1.GenerateReportSuggestionsRequest) (*notebooklmv1alpha1.GenerateReportSuggestionsResponse, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GenerateReportSuggestions: RPC ID not defined in proto")
}

// GetProjectAnalytics calls the GetProjectAnalytics RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetProjectAnalytics(ctx context.Context, req *notebooklmv1alpha1.GetProjectAnalyticsRequest) (*notebooklmv1alpha1.ProjectAnalytics, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GetProjectAnalytics: RPC ID not defined in proto")
}

// SubmitFeedback calls the SubmitFeedback RPC method.
func (c *LabsTailwindOrchestrationServiceClient) SubmitFeedback(ctx context.Context, req *notebooklmv1alpha1.SubmitFeedbackRequest) (*emptypb.Empty, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("SubmitFeedback: RPC ID not defined in proto")
}

// GetOrCreateAccount calls the GetOrCreateAccount RPC method.
func (c *LabsTailwindOrchestrationServiceClient) GetOrCreateAccount(ctx context.Context, req *notebooklmv1alpha1.GetOrCreateAccountRequest) (*notebooklmv1alpha1.Account, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("GetOrCreateAccount: RPC ID not defined in proto")
}

// MutateAccount calls the MutateAccount RPC method.
func (c *LabsTailwindOrchestrationServiceClient) MutateAccount(ctx context.Context, req *notebooklmv1alpha1.MutateAccountRequest) (*notebooklmv1alpha1.Account, error) {
	// No RPC ID defined for this method
	return nil, fmt.Errorf("MutateAccount: RPC ID not defined in proto")
}
