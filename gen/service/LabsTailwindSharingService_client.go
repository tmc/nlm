// GENERATION_BEHAVIOR: overwrite
// Code generated by protoc-gen-anything. DO NOT EDIT.
// source: notebooklm/v1alpha1/sharing.proto

package service

import (
	"context"
	"fmt"

	"github.com/tmc/nlm/gen/method"
	notebooklmv1alpha1 "github.com/tmc/nlm/gen/notebooklm/v1alpha1"
	"github.com/tmc/nlm/internal/batchexecute"
	"github.com/tmc/nlm/internal/beprotojson"
	"github.com/tmc/nlm/internal/rpc"
)

// LabsTailwindSharingServiceClient is a generated client for the LabsTailwindSharingService service.
type LabsTailwindSharingServiceClient struct {
	rpcClient *rpc.Client
}

// NewLabsTailwindSharingServiceClient creates a new client for the LabsTailwindSharingService service.
func NewLabsTailwindSharingServiceClient(authToken, cookies string, opts ...batchexecute.Option) *LabsTailwindSharingServiceClient {
	return &LabsTailwindSharingServiceClient{
		rpcClient: rpc.New(authToken, cookies, opts...),
	}
}

// ShareAudio calls the ShareAudio RPC method.
func (c *LabsTailwindSharingServiceClient) ShareAudio(ctx context.Context, req *notebooklmv1alpha1.ShareAudioRequest) (*notebooklmv1alpha1.ShareAudioResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "RGP97b",
		Args: method.EncodeShareAudioArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ShareAudio: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ShareAudioResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ShareAudio: unmarshal response: %w", err)
	}

	return &result, nil
}

// GetProjectDetails calls the GetProjectDetails RPC method.
func (c *LabsTailwindSharingServiceClient) GetProjectDetails(ctx context.Context, req *notebooklmv1alpha1.GetProjectDetailsRequest) (*notebooklmv1alpha1.ProjectDetails, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "JFMDGd",
		Args: method.EncodeGetProjectDetailsArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("GetProjectDetails: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ProjectDetails
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("GetProjectDetails: unmarshal response: %w", err)
	}

	return &result, nil
}

// ShareProject calls the ShareProject RPC method.
func (c *LabsTailwindSharingServiceClient) ShareProject(ctx context.Context, req *notebooklmv1alpha1.ShareProjectRequest) (*notebooklmv1alpha1.ShareProjectResponse, error) {
	// Build the RPC call
	call := rpc.Call{
		ID:   "QDyure",
		Args: method.EncodeShareProjectArgs(req),
	}

	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("ShareProject: %w", err)
	}

	// Decode the response
	var result notebooklmv1alpha1.ShareProjectResponse
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("ShareProject: unmarshal response: %w", err)
	}

	return &result, nil
}
