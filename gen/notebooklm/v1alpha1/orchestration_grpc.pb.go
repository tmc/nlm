// Orchestration service definitions discovered from JavaScript analysis

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: notebooklm/v1alpha1/orchestration.proto

package notebooklmv1alpha1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LabsTailwindOrchestrationService_CreateArtifact_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/CreateArtifact"
	LabsTailwindOrchestrationService_GetArtifact_FullMethodName                 = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetArtifact"
	LabsTailwindOrchestrationService_UpdateArtifact_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/UpdateArtifact"
	LabsTailwindOrchestrationService_RenameArtifact_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/RenameArtifact"
	LabsTailwindOrchestrationService_DeleteArtifact_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DeleteArtifact"
	LabsTailwindOrchestrationService_ListArtifacts_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/ListArtifacts"
	LabsTailwindOrchestrationService_ActOnSources_FullMethodName                = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/ActOnSources"
	LabsTailwindOrchestrationService_AddSources_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/AddSources"
	LabsTailwindOrchestrationService_CheckSourceFreshness_FullMethodName        = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/CheckSourceFreshness"
	LabsTailwindOrchestrationService_DeleteSources_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DeleteSources"
	LabsTailwindOrchestrationService_DiscoverSources_FullMethodName             = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DiscoverSources"
	LabsTailwindOrchestrationService_LoadSource_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/LoadSource"
	LabsTailwindOrchestrationService_MutateSource_FullMethodName                = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/MutateSource"
	LabsTailwindOrchestrationService_RefreshSource_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/RefreshSource"
	LabsTailwindOrchestrationService_CreateAudioOverview_FullMethodName         = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/CreateAudioOverview"
	LabsTailwindOrchestrationService_GetAudioOverview_FullMethodName            = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetAudioOverview"
	LabsTailwindOrchestrationService_DeleteAudioOverview_FullMethodName         = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DeleteAudioOverview"
	LabsTailwindOrchestrationService_CreateNote_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/CreateNote"
	LabsTailwindOrchestrationService_DeleteNotes_FullMethodName                 = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DeleteNotes"
	LabsTailwindOrchestrationService_GetNotes_FullMethodName                    = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetNotes"
	LabsTailwindOrchestrationService_MutateNote_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/MutateNote"
	LabsTailwindOrchestrationService_CreateProject_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/CreateProject"
	LabsTailwindOrchestrationService_DeleteProjects_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/DeleteProjects"
	LabsTailwindOrchestrationService_GetProject_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetProject"
	LabsTailwindOrchestrationService_ListFeaturedProjects_FullMethodName        = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/ListFeaturedProjects"
	LabsTailwindOrchestrationService_ListRecentlyViewedProjects_FullMethodName  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/ListRecentlyViewedProjects"
	LabsTailwindOrchestrationService_MutateProject_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/MutateProject"
	LabsTailwindOrchestrationService_RemoveRecentlyViewedProject_FullMethodName = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/RemoveRecentlyViewedProject"
	LabsTailwindOrchestrationService_GenerateDocumentGuides_FullMethodName      = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateDocumentGuides"
	LabsTailwindOrchestrationService_GenerateFreeFormStreamed_FullMethodName    = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateFreeFormStreamed"
	LabsTailwindOrchestrationService_GenerateNotebookGuide_FullMethodName       = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateNotebookGuide"
	LabsTailwindOrchestrationService_GenerateOutline_FullMethodName             = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateOutline"
	LabsTailwindOrchestrationService_GenerateReportSuggestions_FullMethodName   = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateReportSuggestions"
	LabsTailwindOrchestrationService_GenerateSection_FullMethodName             = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateSection"
	LabsTailwindOrchestrationService_StartDraft_FullMethodName                  = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/StartDraft"
	LabsTailwindOrchestrationService_StartSection_FullMethodName                = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/StartSection"
	LabsTailwindOrchestrationService_GenerateMagicView_FullMethodName           = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GenerateMagicView"
	LabsTailwindOrchestrationService_GetProjectAnalytics_FullMethodName         = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetProjectAnalytics"
	LabsTailwindOrchestrationService_SubmitFeedback_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/SubmitFeedback"
	LabsTailwindOrchestrationService_GetOrCreateAccount_FullMethodName          = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/GetOrCreateAccount"
	LabsTailwindOrchestrationService_MutateAccount_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindOrchestrationService/MutateAccount"
)

// LabsTailwindOrchestrationServiceClient is the client API for LabsTailwindOrchestrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabsTailwindOrchestrationServiceClient interface {
	// Artifact operations
	CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	RenameArtifact(ctx context.Context, in *RenameArtifactRequest, opts ...grpc.CallOption) (*Artifact, error)
	DeleteArtifact(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error)
	// Source operations
	ActOnSources(ctx context.Context, in *ActOnSourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddSources(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*Project, error)
	CheckSourceFreshness(ctx context.Context, in *CheckSourceFreshnessRequest, opts ...grpc.CallOption) (*CheckSourceFreshnessResponse, error)
	DeleteSources(ctx context.Context, in *DeleteSourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DiscoverSources(ctx context.Context, in *DiscoverSourcesRequest, opts ...grpc.CallOption) (*DiscoverSourcesResponse, error)
	LoadSource(ctx context.Context, in *LoadSourceRequest, opts ...grpc.CallOption) (*Source, error)
	MutateSource(ctx context.Context, in *MutateSourceRequest, opts ...grpc.CallOption) (*Source, error)
	RefreshSource(ctx context.Context, in *RefreshSourceRequest, opts ...grpc.CallOption) (*Source, error)
	// Audio operations
	CreateAudioOverview(ctx context.Context, in *CreateAudioOverviewRequest, opts ...grpc.CallOption) (*AudioOverview, error)
	GetAudioOverview(ctx context.Context, in *GetAudioOverviewRequest, opts ...grpc.CallOption) (*AudioOverview, error)
	DeleteAudioOverview(ctx context.Context, in *DeleteAudioOverviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Note operations
	CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Source, error)
	DeleteNotes(ctx context.Context, in *DeleteNotesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetNotes(ctx context.Context, in *GetNotesRequest, opts ...grpc.CallOption) (*GetNotesResponse, error)
	MutateNote(ctx context.Context, in *MutateNoteRequest, opts ...grpc.CallOption) (*Source, error)
	// Project operations
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	DeleteProjects(ctx context.Context, in *DeleteProjectsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	ListFeaturedProjects(ctx context.Context, in *ListFeaturedProjectsRequest, opts ...grpc.CallOption) (*ListFeaturedProjectsResponse, error)
	ListRecentlyViewedProjects(ctx context.Context, in *ListRecentlyViewedProjectsRequest, opts ...grpc.CallOption) (*ListRecentlyViewedProjectsResponse, error)
	MutateProject(ctx context.Context, in *MutateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	RemoveRecentlyViewedProject(ctx context.Context, in *RemoveRecentlyViewedProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Generation operations
	GenerateDocumentGuides(ctx context.Context, in *GenerateDocumentGuidesRequest, opts ...grpc.CallOption) (*GenerateDocumentGuidesResponse, error)
	GenerateFreeFormStreamed(ctx context.Context, in *GenerateFreeFormStreamedRequest, opts ...grpc.CallOption) (LabsTailwindOrchestrationService_GenerateFreeFormStreamedClient, error)
	GenerateNotebookGuide(ctx context.Context, in *GenerateNotebookGuideRequest, opts ...grpc.CallOption) (*GenerateNotebookGuideResponse, error)
	GenerateOutline(ctx context.Context, in *GenerateOutlineRequest, opts ...grpc.CallOption) (*GenerateOutlineResponse, error)
	GenerateReportSuggestions(ctx context.Context, in *GenerateReportSuggestionsRequest, opts ...grpc.CallOption) (*GenerateReportSuggestionsResponse, error)
	GenerateSection(ctx context.Context, in *GenerateSectionRequest, opts ...grpc.CallOption) (*GenerateSectionResponse, error)
	StartDraft(ctx context.Context, in *StartDraftRequest, opts ...grpc.CallOption) (*StartDraftResponse, error)
	StartSection(ctx context.Context, in *StartSectionRequest, opts ...grpc.CallOption) (*StartSectionResponse, error)
	GenerateMagicView(ctx context.Context, in *GenerateMagicViewRequest, opts ...grpc.CallOption) (*GenerateMagicViewResponse, error)
	// Analytics and feedback
	GetProjectAnalytics(ctx context.Context, in *GetProjectAnalyticsRequest, opts ...grpc.CallOption) (*ProjectAnalytics, error)
	SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Account operations
	GetOrCreateAccount(ctx context.Context, in *GetOrCreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	MutateAccount(ctx context.Context, in *MutateAccountRequest, opts ...grpc.CallOption) (*Account, error)
}

type labsTailwindOrchestrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabsTailwindOrchestrationServiceClient(cc grpc.ClientConnInterface) LabsTailwindOrchestrationServiceClient {
	return &labsTailwindOrchestrationServiceClient{cc}
}

func (c *labsTailwindOrchestrationServiceClient) CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_CreateArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetArtifact(ctx context.Context, in *GetArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) UpdateArtifact(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_UpdateArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) RenameArtifact(ctx context.Context, in *RenameArtifactRequest, opts ...grpc.CallOption) (*Artifact, error) {
	out := new(Artifact)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_RenameArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DeleteArtifact(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DeleteArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) ListArtifacts(ctx context.Context, in *ListArtifactsRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	out := new(ListArtifactsResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_ListArtifacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) ActOnSources(ctx context.Context, in *ActOnSourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_ActOnSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) AddSources(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_AddSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) CheckSourceFreshness(ctx context.Context, in *CheckSourceFreshnessRequest, opts ...grpc.CallOption) (*CheckSourceFreshnessResponse, error) {
	out := new(CheckSourceFreshnessResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_CheckSourceFreshness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DeleteSources(ctx context.Context, in *DeleteSourcesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DeleteSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DiscoverSources(ctx context.Context, in *DiscoverSourcesRequest, opts ...grpc.CallOption) (*DiscoverSourcesResponse, error) {
	out := new(DiscoverSourcesResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DiscoverSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) LoadSource(ctx context.Context, in *LoadSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_LoadSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) MutateSource(ctx context.Context, in *MutateSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_MutateSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) RefreshSource(ctx context.Context, in *RefreshSourceRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_RefreshSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) CreateAudioOverview(ctx context.Context, in *CreateAudioOverviewRequest, opts ...grpc.CallOption) (*AudioOverview, error) {
	out := new(AudioOverview)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_CreateAudioOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetAudioOverview(ctx context.Context, in *GetAudioOverviewRequest, opts ...grpc.CallOption) (*AudioOverview, error) {
	out := new(AudioOverview)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetAudioOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DeleteAudioOverview(ctx context.Context, in *DeleteAudioOverviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DeleteAudioOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) CreateNote(ctx context.Context, in *CreateNoteRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_CreateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DeleteNotes(ctx context.Context, in *DeleteNotesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DeleteNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetNotes(ctx context.Context, in *GetNotesRequest, opts ...grpc.CallOption) (*GetNotesResponse, error) {
	out := new(GetNotesResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetNotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) MutateNote(ctx context.Context, in *MutateNoteRequest, opts ...grpc.CallOption) (*Source, error) {
	out := new(Source)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_MutateNote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) DeleteProjects(ctx context.Context, in *DeleteProjectsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_DeleteProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) ListFeaturedProjects(ctx context.Context, in *ListFeaturedProjectsRequest, opts ...grpc.CallOption) (*ListFeaturedProjectsResponse, error) {
	out := new(ListFeaturedProjectsResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_ListFeaturedProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) ListRecentlyViewedProjects(ctx context.Context, in *ListRecentlyViewedProjectsRequest, opts ...grpc.CallOption) (*ListRecentlyViewedProjectsResponse, error) {
	out := new(ListRecentlyViewedProjectsResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_ListRecentlyViewedProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) MutateProject(ctx context.Context, in *MutateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_MutateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) RemoveRecentlyViewedProject(ctx context.Context, in *RemoveRecentlyViewedProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_RemoveRecentlyViewedProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateDocumentGuides(ctx context.Context, in *GenerateDocumentGuidesRequest, opts ...grpc.CallOption) (*GenerateDocumentGuidesResponse, error) {
	out := new(GenerateDocumentGuidesResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateDocumentGuides_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateFreeFormStreamed(ctx context.Context, in *GenerateFreeFormStreamedRequest, opts ...grpc.CallOption) (LabsTailwindOrchestrationService_GenerateFreeFormStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &LabsTailwindOrchestrationService_ServiceDesc.Streams[0], LabsTailwindOrchestrationService_GenerateFreeFormStreamed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &labsTailwindOrchestrationServiceGenerateFreeFormStreamedClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LabsTailwindOrchestrationService_GenerateFreeFormStreamedClient interface {
	Recv() (*GenerateFreeFormStreamedResponse, error)
	grpc.ClientStream
}

type labsTailwindOrchestrationServiceGenerateFreeFormStreamedClient struct {
	grpc.ClientStream
}

func (x *labsTailwindOrchestrationServiceGenerateFreeFormStreamedClient) Recv() (*GenerateFreeFormStreamedResponse, error) {
	m := new(GenerateFreeFormStreamedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateNotebookGuide(ctx context.Context, in *GenerateNotebookGuideRequest, opts ...grpc.CallOption) (*GenerateNotebookGuideResponse, error) {
	out := new(GenerateNotebookGuideResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateNotebookGuide_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateOutline(ctx context.Context, in *GenerateOutlineRequest, opts ...grpc.CallOption) (*GenerateOutlineResponse, error) {
	out := new(GenerateOutlineResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateOutline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateReportSuggestions(ctx context.Context, in *GenerateReportSuggestionsRequest, opts ...grpc.CallOption) (*GenerateReportSuggestionsResponse, error) {
	out := new(GenerateReportSuggestionsResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateReportSuggestions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateSection(ctx context.Context, in *GenerateSectionRequest, opts ...grpc.CallOption) (*GenerateSectionResponse, error) {
	out := new(GenerateSectionResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) StartDraft(ctx context.Context, in *StartDraftRequest, opts ...grpc.CallOption) (*StartDraftResponse, error) {
	out := new(StartDraftResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_StartDraft_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) StartSection(ctx context.Context, in *StartSectionRequest, opts ...grpc.CallOption) (*StartSectionResponse, error) {
	out := new(StartSectionResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_StartSection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GenerateMagicView(ctx context.Context, in *GenerateMagicViewRequest, opts ...grpc.CallOption) (*GenerateMagicViewResponse, error) {
	out := new(GenerateMagicViewResponse)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GenerateMagicView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetProjectAnalytics(ctx context.Context, in *GetProjectAnalyticsRequest, opts ...grpc.CallOption) (*ProjectAnalytics, error) {
	out := new(ProjectAnalytics)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetProjectAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) SubmitFeedback(ctx context.Context, in *SubmitFeedbackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_SubmitFeedback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) GetOrCreateAccount(ctx context.Context, in *GetOrCreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_GetOrCreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindOrchestrationServiceClient) MutateAccount(ctx context.Context, in *MutateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, LabsTailwindOrchestrationService_MutateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabsTailwindOrchestrationServiceServer is the server API for LabsTailwindOrchestrationService service.
// All implementations must embed UnimplementedLabsTailwindOrchestrationServiceServer
// for forward compatibility
type LabsTailwindOrchestrationServiceServer interface {
	// Artifact operations
	CreateArtifact(context.Context, *CreateArtifactRequest) (*Artifact, error)
	GetArtifact(context.Context, *GetArtifactRequest) (*Artifact, error)
	UpdateArtifact(context.Context, *UpdateArtifactRequest) (*Artifact, error)
	RenameArtifact(context.Context, *RenameArtifactRequest) (*Artifact, error)
	DeleteArtifact(context.Context, *DeleteArtifactRequest) (*emptypb.Empty, error)
	ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error)
	// Source operations
	ActOnSources(context.Context, *ActOnSourcesRequest) (*emptypb.Empty, error)
	AddSources(context.Context, *AddSourceRequest) (*Project, error)
	CheckSourceFreshness(context.Context, *CheckSourceFreshnessRequest) (*CheckSourceFreshnessResponse, error)
	DeleteSources(context.Context, *DeleteSourcesRequest) (*emptypb.Empty, error)
	DiscoverSources(context.Context, *DiscoverSourcesRequest) (*DiscoverSourcesResponse, error)
	LoadSource(context.Context, *LoadSourceRequest) (*Source, error)
	MutateSource(context.Context, *MutateSourceRequest) (*Source, error)
	RefreshSource(context.Context, *RefreshSourceRequest) (*Source, error)
	// Audio operations
	CreateAudioOverview(context.Context, *CreateAudioOverviewRequest) (*AudioOverview, error)
	GetAudioOverview(context.Context, *GetAudioOverviewRequest) (*AudioOverview, error)
	DeleteAudioOverview(context.Context, *DeleteAudioOverviewRequest) (*emptypb.Empty, error)
	// Note operations
	CreateNote(context.Context, *CreateNoteRequest) (*Source, error)
	DeleteNotes(context.Context, *DeleteNotesRequest) (*emptypb.Empty, error)
	GetNotes(context.Context, *GetNotesRequest) (*GetNotesResponse, error)
	MutateNote(context.Context, *MutateNoteRequest) (*Source, error)
	// Project operations
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	DeleteProjects(context.Context, *DeleteProjectsRequest) (*emptypb.Empty, error)
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	ListFeaturedProjects(context.Context, *ListFeaturedProjectsRequest) (*ListFeaturedProjectsResponse, error)
	ListRecentlyViewedProjects(context.Context, *ListRecentlyViewedProjectsRequest) (*ListRecentlyViewedProjectsResponse, error)
	MutateProject(context.Context, *MutateProjectRequest) (*Project, error)
	RemoveRecentlyViewedProject(context.Context, *RemoveRecentlyViewedProjectRequest) (*emptypb.Empty, error)
	// Generation operations
	GenerateDocumentGuides(context.Context, *GenerateDocumentGuidesRequest) (*GenerateDocumentGuidesResponse, error)
	GenerateFreeFormStreamed(*GenerateFreeFormStreamedRequest, LabsTailwindOrchestrationService_GenerateFreeFormStreamedServer) error
	GenerateNotebookGuide(context.Context, *GenerateNotebookGuideRequest) (*GenerateNotebookGuideResponse, error)
	GenerateOutline(context.Context, *GenerateOutlineRequest) (*GenerateOutlineResponse, error)
	GenerateReportSuggestions(context.Context, *GenerateReportSuggestionsRequest) (*GenerateReportSuggestionsResponse, error)
	GenerateSection(context.Context, *GenerateSectionRequest) (*GenerateSectionResponse, error)
	StartDraft(context.Context, *StartDraftRequest) (*StartDraftResponse, error)
	StartSection(context.Context, *StartSectionRequest) (*StartSectionResponse, error)
	GenerateMagicView(context.Context, *GenerateMagicViewRequest) (*GenerateMagicViewResponse, error)
	// Analytics and feedback
	GetProjectAnalytics(context.Context, *GetProjectAnalyticsRequest) (*ProjectAnalytics, error)
	SubmitFeedback(context.Context, *SubmitFeedbackRequest) (*emptypb.Empty, error)
	// Account operations
	GetOrCreateAccount(context.Context, *GetOrCreateAccountRequest) (*Account, error)
	MutateAccount(context.Context, *MutateAccountRequest) (*Account, error)
	mustEmbedUnimplementedLabsTailwindOrchestrationServiceServer()
}

// UnimplementedLabsTailwindOrchestrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabsTailwindOrchestrationServiceServer struct {
}

func (UnimplementedLabsTailwindOrchestrationServiceServer) CreateArtifact(context.Context, *CreateArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifact not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetArtifact(context.Context, *GetArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifact not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) UpdateArtifact(context.Context, *UpdateArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifact not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) RenameArtifact(context.Context, *RenameArtifactRequest) (*Artifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameArtifact not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DeleteArtifact(context.Context, *DeleteArtifactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifact not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) ListArtifacts(context.Context, *ListArtifactsRequest) (*ListArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifacts not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) ActOnSources(context.Context, *ActOnSourcesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActOnSources not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) AddSources(context.Context, *AddSourceRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSources not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) CheckSourceFreshness(context.Context, *CheckSourceFreshnessRequest) (*CheckSourceFreshnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSourceFreshness not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DeleteSources(context.Context, *DeleteSourcesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSources not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DiscoverSources(context.Context, *DiscoverSourcesRequest) (*DiscoverSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverSources not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) LoadSource(context.Context, *LoadSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSource not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) MutateSource(context.Context, *MutateSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateSource not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) RefreshSource(context.Context, *RefreshSourceRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSource not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) CreateAudioOverview(context.Context, *CreateAudioOverviewRequest) (*AudioOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAudioOverview not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetAudioOverview(context.Context, *GetAudioOverviewRequest) (*AudioOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioOverview not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DeleteAudioOverview(context.Context, *DeleteAudioOverviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAudioOverview not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) CreateNote(context.Context, *CreateNoteRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNote not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DeleteNotes(context.Context, *DeleteNotesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotes not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetNotes(context.Context, *GetNotesRequest) (*GetNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotes not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) MutateNote(context.Context, *MutateNoteRequest) (*Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateNote not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) DeleteProjects(context.Context, *DeleteProjectsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjects not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) ListFeaturedProjects(context.Context, *ListFeaturedProjectsRequest) (*ListFeaturedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeaturedProjects not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) ListRecentlyViewedProjects(context.Context, *ListRecentlyViewedProjectsRequest) (*ListRecentlyViewedProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentlyViewedProjects not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) MutateProject(context.Context, *MutateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateProject not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) RemoveRecentlyViewedProject(context.Context, *RemoveRecentlyViewedProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRecentlyViewedProject not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateDocumentGuides(context.Context, *GenerateDocumentGuidesRequest) (*GenerateDocumentGuidesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDocumentGuides not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateFreeFormStreamed(*GenerateFreeFormStreamedRequest, LabsTailwindOrchestrationService_GenerateFreeFormStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateFreeFormStreamed not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateNotebookGuide(context.Context, *GenerateNotebookGuideRequest) (*GenerateNotebookGuideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNotebookGuide not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateOutline(context.Context, *GenerateOutlineRequest) (*GenerateOutlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateOutline not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateReportSuggestions(context.Context, *GenerateReportSuggestionsRequest) (*GenerateReportSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReportSuggestions not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateSection(context.Context, *GenerateSectionRequest) (*GenerateSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSection not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) StartDraft(context.Context, *StartDraftRequest) (*StartDraftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDraft not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) StartSection(context.Context, *StartSectionRequest) (*StartSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSection not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GenerateMagicView(context.Context, *GenerateMagicViewRequest) (*GenerateMagicViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMagicView not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetProjectAnalytics(context.Context, *GetProjectAnalyticsRequest) (*ProjectAnalytics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAnalytics not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) SubmitFeedback(context.Context, *SubmitFeedbackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFeedback not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) GetOrCreateAccount(context.Context, *GetOrCreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrCreateAccount not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) MutateAccount(context.Context, *MutateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateAccount not implemented")
}
func (UnimplementedLabsTailwindOrchestrationServiceServer) mustEmbedUnimplementedLabsTailwindOrchestrationServiceServer() {
}

// UnsafeLabsTailwindOrchestrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabsTailwindOrchestrationServiceServer will
// result in compilation errors.
type UnsafeLabsTailwindOrchestrationServiceServer interface {
	mustEmbedUnimplementedLabsTailwindOrchestrationServiceServer()
}

func RegisterLabsTailwindOrchestrationServiceServer(s grpc.ServiceRegistrar, srv LabsTailwindOrchestrationServiceServer) {
	s.RegisterService(&LabsTailwindOrchestrationService_ServiceDesc, srv)
}

func _LabsTailwindOrchestrationService_CreateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_CreateArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateArtifact(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetArtifact(ctx, req.(*GetArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_UpdateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).UpdateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_UpdateArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).UpdateArtifact(ctx, req.(*UpdateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_RenameArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).RenameArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_RenameArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).RenameArtifact(ctx, req.(*RenameArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DeleteArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DeleteArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteArtifact(ctx, req.(*DeleteArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_ListArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).ListArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_ListArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).ListArtifacts(ctx, req.(*ListArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_ActOnSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActOnSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).ActOnSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_ActOnSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).ActOnSources(ctx, req.(*ActOnSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_AddSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).AddSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_AddSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).AddSources(ctx, req.(*AddSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_CheckSourceFreshness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSourceFreshnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).CheckSourceFreshness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_CheckSourceFreshness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).CheckSourceFreshness(ctx, req.(*CheckSourceFreshnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DeleteSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DeleteSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteSources(ctx, req.(*DeleteSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DiscoverSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DiscoverSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DiscoverSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DiscoverSources(ctx, req.(*DiscoverSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_LoadSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).LoadSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_LoadSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).LoadSource(ctx, req.(*LoadSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_MutateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_MutateSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateSource(ctx, req.(*MutateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_RefreshSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).RefreshSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_RefreshSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).RefreshSource(ctx, req.(*RefreshSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_CreateAudioOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAudioOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateAudioOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_CreateAudioOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateAudioOverview(ctx, req.(*CreateAudioOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetAudioOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetAudioOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetAudioOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetAudioOverview(ctx, req.(*GetAudioOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DeleteAudioOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAudioOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteAudioOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DeleteAudioOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteAudioOverview(ctx, req.(*DeleteAudioOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_CreateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_CreateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateNote(ctx, req.(*CreateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DeleteNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DeleteNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteNotes(ctx, req.(*DeleteNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetNotes(ctx, req.(*GetNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_MutateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_MutateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateNote(ctx, req.(*MutateNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_DeleteProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_DeleteProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).DeleteProjects(ctx, req.(*DeleteProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_ListFeaturedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).ListFeaturedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_ListFeaturedProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).ListFeaturedProjects(ctx, req.(*ListFeaturedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_ListRecentlyViewedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentlyViewedProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).ListRecentlyViewedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_ListRecentlyViewedProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).ListRecentlyViewedProjects(ctx, req.(*ListRecentlyViewedProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_MutateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_MutateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateProject(ctx, req.(*MutateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_RemoveRecentlyViewedProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRecentlyViewedProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).RemoveRecentlyViewedProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_RemoveRecentlyViewedProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).RemoveRecentlyViewedProject(ctx, req.(*RemoveRecentlyViewedProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateDocumentGuides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDocumentGuidesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateDocumentGuides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateDocumentGuides_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateDocumentGuides(ctx, req.(*GenerateDocumentGuidesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateFreeFormStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateFreeFormStreamedRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LabsTailwindOrchestrationServiceServer).GenerateFreeFormStreamed(m, &labsTailwindOrchestrationServiceGenerateFreeFormStreamedServer{stream})
}

type LabsTailwindOrchestrationService_GenerateFreeFormStreamedServer interface {
	Send(*GenerateFreeFormStreamedResponse) error
	grpc.ServerStream
}

type labsTailwindOrchestrationServiceGenerateFreeFormStreamedServer struct {
	grpc.ServerStream
}

func (x *labsTailwindOrchestrationServiceGenerateFreeFormStreamedServer) Send(m *GenerateFreeFormStreamedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LabsTailwindOrchestrationService_GenerateNotebookGuide_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateNotebookGuideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateNotebookGuide(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateNotebookGuide_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateNotebookGuide(ctx, req.(*GenerateNotebookGuideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateOutline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateOutlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateOutline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateOutline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateOutline(ctx, req.(*GenerateOutlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateReportSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateReportSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateReportSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateReportSuggestions(ctx, req.(*GenerateReportSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateSection(ctx, req.(*GenerateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_StartDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDraftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).StartDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_StartDraft_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).StartDraft(ctx, req.(*StartDraftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_StartSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).StartSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_StartSection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).StartSection(ctx, req.(*StartSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GenerateMagicView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMagicViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateMagicView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GenerateMagicView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GenerateMagicView(ctx, req.(*GenerateMagicViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetProjectAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetProjectAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetProjectAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetProjectAnalytics(ctx, req.(*GetProjectAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_SubmitFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).SubmitFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_SubmitFeedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).SubmitFeedback(ctx, req.(*SubmitFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_GetOrCreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrCreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).GetOrCreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_GetOrCreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).GetOrCreateAccount(ctx, req.(*GetOrCreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindOrchestrationService_MutateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindOrchestrationService_MutateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindOrchestrationServiceServer).MutateAccount(ctx, req.(*MutateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabsTailwindOrchestrationService_ServiceDesc is the grpc.ServiceDesc for LabsTailwindOrchestrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabsTailwindOrchestrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notebooklm.v1alpha1.LabsTailwindOrchestrationService",
	HandlerType: (*LabsTailwindOrchestrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifact",
			Handler:    _LabsTailwindOrchestrationService_CreateArtifact_Handler,
		},
		{
			MethodName: "GetArtifact",
			Handler:    _LabsTailwindOrchestrationService_GetArtifact_Handler,
		},
		{
			MethodName: "UpdateArtifact",
			Handler:    _LabsTailwindOrchestrationService_UpdateArtifact_Handler,
		},
		{
			MethodName: "RenameArtifact",
			Handler:    _LabsTailwindOrchestrationService_RenameArtifact_Handler,
		},
		{
			MethodName: "DeleteArtifact",
			Handler:    _LabsTailwindOrchestrationService_DeleteArtifact_Handler,
		},
		{
			MethodName: "ListArtifacts",
			Handler:    _LabsTailwindOrchestrationService_ListArtifacts_Handler,
		},
		{
			MethodName: "ActOnSources",
			Handler:    _LabsTailwindOrchestrationService_ActOnSources_Handler,
		},
		{
			MethodName: "AddSources",
			Handler:    _LabsTailwindOrchestrationService_AddSources_Handler,
		},
		{
			MethodName: "CheckSourceFreshness",
			Handler:    _LabsTailwindOrchestrationService_CheckSourceFreshness_Handler,
		},
		{
			MethodName: "DeleteSources",
			Handler:    _LabsTailwindOrchestrationService_DeleteSources_Handler,
		},
		{
			MethodName: "DiscoverSources",
			Handler:    _LabsTailwindOrchestrationService_DiscoverSources_Handler,
		},
		{
			MethodName: "LoadSource",
			Handler:    _LabsTailwindOrchestrationService_LoadSource_Handler,
		},
		{
			MethodName: "MutateSource",
			Handler:    _LabsTailwindOrchestrationService_MutateSource_Handler,
		},
		{
			MethodName: "RefreshSource",
			Handler:    _LabsTailwindOrchestrationService_RefreshSource_Handler,
		},
		{
			MethodName: "CreateAudioOverview",
			Handler:    _LabsTailwindOrchestrationService_CreateAudioOverview_Handler,
		},
		{
			MethodName: "GetAudioOverview",
			Handler:    _LabsTailwindOrchestrationService_GetAudioOverview_Handler,
		},
		{
			MethodName: "DeleteAudioOverview",
			Handler:    _LabsTailwindOrchestrationService_DeleteAudioOverview_Handler,
		},
		{
			MethodName: "CreateNote",
			Handler:    _LabsTailwindOrchestrationService_CreateNote_Handler,
		},
		{
			MethodName: "DeleteNotes",
			Handler:    _LabsTailwindOrchestrationService_DeleteNotes_Handler,
		},
		{
			MethodName: "GetNotes",
			Handler:    _LabsTailwindOrchestrationService_GetNotes_Handler,
		},
		{
			MethodName: "MutateNote",
			Handler:    _LabsTailwindOrchestrationService_MutateNote_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _LabsTailwindOrchestrationService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProjects",
			Handler:    _LabsTailwindOrchestrationService_DeleteProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _LabsTailwindOrchestrationService_GetProject_Handler,
		},
		{
			MethodName: "ListFeaturedProjects",
			Handler:    _LabsTailwindOrchestrationService_ListFeaturedProjects_Handler,
		},
		{
			MethodName: "ListRecentlyViewedProjects",
			Handler:    _LabsTailwindOrchestrationService_ListRecentlyViewedProjects_Handler,
		},
		{
			MethodName: "MutateProject",
			Handler:    _LabsTailwindOrchestrationService_MutateProject_Handler,
		},
		{
			MethodName: "RemoveRecentlyViewedProject",
			Handler:    _LabsTailwindOrchestrationService_RemoveRecentlyViewedProject_Handler,
		},
		{
			MethodName: "GenerateDocumentGuides",
			Handler:    _LabsTailwindOrchestrationService_GenerateDocumentGuides_Handler,
		},
		{
			MethodName: "GenerateNotebookGuide",
			Handler:    _LabsTailwindOrchestrationService_GenerateNotebookGuide_Handler,
		},
		{
			MethodName: "GenerateOutline",
			Handler:    _LabsTailwindOrchestrationService_GenerateOutline_Handler,
		},
		{
			MethodName: "GenerateReportSuggestions",
			Handler:    _LabsTailwindOrchestrationService_GenerateReportSuggestions_Handler,
		},
		{
			MethodName: "GenerateSection",
			Handler:    _LabsTailwindOrchestrationService_GenerateSection_Handler,
		},
		{
			MethodName: "StartDraft",
			Handler:    _LabsTailwindOrchestrationService_StartDraft_Handler,
		},
		{
			MethodName: "StartSection",
			Handler:    _LabsTailwindOrchestrationService_StartSection_Handler,
		},
		{
			MethodName: "GenerateMagicView",
			Handler:    _LabsTailwindOrchestrationService_GenerateMagicView_Handler,
		},
		{
			MethodName: "GetProjectAnalytics",
			Handler:    _LabsTailwindOrchestrationService_GetProjectAnalytics_Handler,
		},
		{
			MethodName: "SubmitFeedback",
			Handler:    _LabsTailwindOrchestrationService_SubmitFeedback_Handler,
		},
		{
			MethodName: "GetOrCreateAccount",
			Handler:    _LabsTailwindOrchestrationService_GetOrCreateAccount_Handler,
		},
		{
			MethodName: "MutateAccount",
			Handler:    _LabsTailwindOrchestrationService_MutateAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateFreeFormStreamed",
			Handler:       _LabsTailwindOrchestrationService_GenerateFreeFormStreamed_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "notebooklm/v1alpha1/orchestration.proto",
}
