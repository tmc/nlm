// Sharing service definitions discovered from JavaScript analysis

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: notebooklm/v1alpha1/sharing.proto

package notebooklmv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LabsTailwindSharingService_ShareAudio_FullMethodName        = "/notebooklm.v1alpha1.LabsTailwindSharingService/ShareAudio"
	LabsTailwindSharingService_GetProjectDetails_FullMethodName = "/notebooklm.v1alpha1.LabsTailwindSharingService/GetProjectDetails"
	LabsTailwindSharingService_ShareProject_FullMethodName      = "/notebooklm.v1alpha1.LabsTailwindSharingService/ShareProject"
)

// LabsTailwindSharingServiceClient is the client API for LabsTailwindSharingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabsTailwindSharingServiceClient interface {
	// Audio sharing
	ShareAudio(ctx context.Context, in *ShareAudioRequest, opts ...grpc.CallOption) (*ShareAudioResponse, error)
	// Project sharing
	GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*ProjectDetails, error)
	ShareProject(ctx context.Context, in *ShareProjectRequest, opts ...grpc.CallOption) (*ShareProjectResponse, error)
}

type labsTailwindSharingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabsTailwindSharingServiceClient(cc grpc.ClientConnInterface) LabsTailwindSharingServiceClient {
	return &labsTailwindSharingServiceClient{cc}
}

func (c *labsTailwindSharingServiceClient) ShareAudio(ctx context.Context, in *ShareAudioRequest, opts ...grpc.CallOption) (*ShareAudioResponse, error) {
	out := new(ShareAudioResponse)
	err := c.cc.Invoke(ctx, LabsTailwindSharingService_ShareAudio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindSharingServiceClient) GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*ProjectDetails, error) {
	out := new(ProjectDetails)
	err := c.cc.Invoke(ctx, LabsTailwindSharingService_GetProjectDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindSharingServiceClient) ShareProject(ctx context.Context, in *ShareProjectRequest, opts ...grpc.CallOption) (*ShareProjectResponse, error) {
	out := new(ShareProjectResponse)
	err := c.cc.Invoke(ctx, LabsTailwindSharingService_ShareProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabsTailwindSharingServiceServer is the server API for LabsTailwindSharingService service.
// All implementations must embed UnimplementedLabsTailwindSharingServiceServer
// for forward compatibility
type LabsTailwindSharingServiceServer interface {
	// Audio sharing
	ShareAudio(context.Context, *ShareAudioRequest) (*ShareAudioResponse, error)
	// Project sharing
	GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*ProjectDetails, error)
	ShareProject(context.Context, *ShareProjectRequest) (*ShareProjectResponse, error)
	mustEmbedUnimplementedLabsTailwindSharingServiceServer()
}

// UnimplementedLabsTailwindSharingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabsTailwindSharingServiceServer struct {
}

func (UnimplementedLabsTailwindSharingServiceServer) ShareAudio(context.Context, *ShareAudioRequest) (*ShareAudioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareAudio not implemented")
}
func (UnimplementedLabsTailwindSharingServiceServer) GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*ProjectDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDetails not implemented")
}
func (UnimplementedLabsTailwindSharingServiceServer) ShareProject(context.Context, *ShareProjectRequest) (*ShareProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareProject not implemented")
}
func (UnimplementedLabsTailwindSharingServiceServer) mustEmbedUnimplementedLabsTailwindSharingServiceServer() {
}

// UnsafeLabsTailwindSharingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabsTailwindSharingServiceServer will
// result in compilation errors.
type UnsafeLabsTailwindSharingServiceServer interface {
	mustEmbedUnimplementedLabsTailwindSharingServiceServer()
}

func RegisterLabsTailwindSharingServiceServer(s grpc.ServiceRegistrar, srv LabsTailwindSharingServiceServer) {
	s.RegisterService(&LabsTailwindSharingService_ServiceDesc, srv)
}

func _LabsTailwindSharingService_ShareAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareAudioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindSharingServiceServer).ShareAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindSharingService_ShareAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindSharingServiceServer).ShareAudio(ctx, req.(*ShareAudioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindSharingService_GetProjectDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindSharingServiceServer).GetProjectDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindSharingService_GetProjectDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindSharingServiceServer).GetProjectDetails(ctx, req.(*GetProjectDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindSharingService_ShareProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindSharingServiceServer).ShareProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindSharingService_ShareProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindSharingServiceServer).ShareProject(ctx, req.(*ShareProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabsTailwindSharingService_ServiceDesc is the grpc.ServiceDesc for LabsTailwindSharingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabsTailwindSharingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notebooklm.v1alpha1.LabsTailwindSharingService",
	HandlerType: (*LabsTailwindSharingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShareAudio",
			Handler:    _LabsTailwindSharingService_ShareAudio_Handler,
		},
		{
			MethodName: "GetProjectDetails",
			Handler:    _LabsTailwindSharingService_GetProjectDetails_Handler,
		},
		{
			MethodName: "ShareProject",
			Handler:    _LabsTailwindSharingService_ShareProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notebooklm/v1alpha1/sharing.proto",
}

const (
	LabsTailwindGuidebooksService_DeleteGuidebook_FullMethodName              = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/DeleteGuidebook"
	LabsTailwindGuidebooksService_GetGuidebook_FullMethodName                 = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/GetGuidebook"
	LabsTailwindGuidebooksService_ListRecentlyViewedGuidebooks_FullMethodName = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/ListRecentlyViewedGuidebooks"
	LabsTailwindGuidebooksService_PublishGuidebook_FullMethodName             = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/PublishGuidebook"
	LabsTailwindGuidebooksService_GetGuidebookDetails_FullMethodName          = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/GetGuidebookDetails"
	LabsTailwindGuidebooksService_ShareGuidebook_FullMethodName               = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/ShareGuidebook"
	LabsTailwindGuidebooksService_GuidebookGenerateAnswer_FullMethodName      = "/notebooklm.v1alpha1.LabsTailwindGuidebooksService/GuidebookGenerateAnswer"
)

// LabsTailwindGuidebooksServiceClient is the client API for LabsTailwindGuidebooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabsTailwindGuidebooksServiceClient interface {
	// Guidebook operations
	DeleteGuidebook(ctx context.Context, in *DeleteGuidebookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGuidebook(ctx context.Context, in *GetGuidebookRequest, opts ...grpc.CallOption) (*Guidebook, error)
	ListRecentlyViewedGuidebooks(ctx context.Context, in *ListRecentlyViewedGuidebooksRequest, opts ...grpc.CallOption) (*ListRecentlyViewedGuidebooksResponse, error)
	PublishGuidebook(ctx context.Context, in *PublishGuidebookRequest, opts ...grpc.CallOption) (*PublishGuidebookResponse, error)
	GetGuidebookDetails(ctx context.Context, in *GetGuidebookDetailsRequest, opts ...grpc.CallOption) (*GuidebookDetails, error)
	ShareGuidebook(ctx context.Context, in *ShareGuidebookRequest, opts ...grpc.CallOption) (*ShareGuidebookResponse, error)
	GuidebookGenerateAnswer(ctx context.Context, in *GuidebookGenerateAnswerRequest, opts ...grpc.CallOption) (*GuidebookGenerateAnswerResponse, error)
}

type labsTailwindGuidebooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabsTailwindGuidebooksServiceClient(cc grpc.ClientConnInterface) LabsTailwindGuidebooksServiceClient {
	return &labsTailwindGuidebooksServiceClient{cc}
}

func (c *labsTailwindGuidebooksServiceClient) DeleteGuidebook(ctx context.Context, in *DeleteGuidebookRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_DeleteGuidebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) GetGuidebook(ctx context.Context, in *GetGuidebookRequest, opts ...grpc.CallOption) (*Guidebook, error) {
	out := new(Guidebook)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_GetGuidebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) ListRecentlyViewedGuidebooks(ctx context.Context, in *ListRecentlyViewedGuidebooksRequest, opts ...grpc.CallOption) (*ListRecentlyViewedGuidebooksResponse, error) {
	out := new(ListRecentlyViewedGuidebooksResponse)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_ListRecentlyViewedGuidebooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) PublishGuidebook(ctx context.Context, in *PublishGuidebookRequest, opts ...grpc.CallOption) (*PublishGuidebookResponse, error) {
	out := new(PublishGuidebookResponse)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_PublishGuidebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) GetGuidebookDetails(ctx context.Context, in *GetGuidebookDetailsRequest, opts ...grpc.CallOption) (*GuidebookDetails, error) {
	out := new(GuidebookDetails)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_GetGuidebookDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) ShareGuidebook(ctx context.Context, in *ShareGuidebookRequest, opts ...grpc.CallOption) (*ShareGuidebookResponse, error) {
	out := new(ShareGuidebookResponse)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_ShareGuidebook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labsTailwindGuidebooksServiceClient) GuidebookGenerateAnswer(ctx context.Context, in *GuidebookGenerateAnswerRequest, opts ...grpc.CallOption) (*GuidebookGenerateAnswerResponse, error) {
	out := new(GuidebookGenerateAnswerResponse)
	err := c.cc.Invoke(ctx, LabsTailwindGuidebooksService_GuidebookGenerateAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabsTailwindGuidebooksServiceServer is the server API for LabsTailwindGuidebooksService service.
// All implementations must embed UnimplementedLabsTailwindGuidebooksServiceServer
// for forward compatibility
type LabsTailwindGuidebooksServiceServer interface {
	// Guidebook operations
	DeleteGuidebook(context.Context, *DeleteGuidebookRequest) (*emptypb.Empty, error)
	GetGuidebook(context.Context, *GetGuidebookRequest) (*Guidebook, error)
	ListRecentlyViewedGuidebooks(context.Context, *ListRecentlyViewedGuidebooksRequest) (*ListRecentlyViewedGuidebooksResponse, error)
	PublishGuidebook(context.Context, *PublishGuidebookRequest) (*PublishGuidebookResponse, error)
	GetGuidebookDetails(context.Context, *GetGuidebookDetailsRequest) (*GuidebookDetails, error)
	ShareGuidebook(context.Context, *ShareGuidebookRequest) (*ShareGuidebookResponse, error)
	GuidebookGenerateAnswer(context.Context, *GuidebookGenerateAnswerRequest) (*GuidebookGenerateAnswerResponse, error)
	mustEmbedUnimplementedLabsTailwindGuidebooksServiceServer()
}

// UnimplementedLabsTailwindGuidebooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabsTailwindGuidebooksServiceServer struct {
}

func (UnimplementedLabsTailwindGuidebooksServiceServer) DeleteGuidebook(context.Context, *DeleteGuidebookRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuidebook not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) GetGuidebook(context.Context, *GetGuidebookRequest) (*Guidebook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuidebook not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) ListRecentlyViewedGuidebooks(context.Context, *ListRecentlyViewedGuidebooksRequest) (*ListRecentlyViewedGuidebooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentlyViewedGuidebooks not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) PublishGuidebook(context.Context, *PublishGuidebookRequest) (*PublishGuidebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishGuidebook not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) GetGuidebookDetails(context.Context, *GetGuidebookDetailsRequest) (*GuidebookDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuidebookDetails not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) ShareGuidebook(context.Context, *ShareGuidebookRequest) (*ShareGuidebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareGuidebook not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) GuidebookGenerateAnswer(context.Context, *GuidebookGenerateAnswerRequest) (*GuidebookGenerateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuidebookGenerateAnswer not implemented")
}
func (UnimplementedLabsTailwindGuidebooksServiceServer) mustEmbedUnimplementedLabsTailwindGuidebooksServiceServer() {
}

// UnsafeLabsTailwindGuidebooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabsTailwindGuidebooksServiceServer will
// result in compilation errors.
type UnsafeLabsTailwindGuidebooksServiceServer interface {
	mustEmbedUnimplementedLabsTailwindGuidebooksServiceServer()
}

func RegisterLabsTailwindGuidebooksServiceServer(s grpc.ServiceRegistrar, srv LabsTailwindGuidebooksServiceServer) {
	s.RegisterService(&LabsTailwindGuidebooksService_ServiceDesc, srv)
}

func _LabsTailwindGuidebooksService_DeleteGuidebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGuidebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).DeleteGuidebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_DeleteGuidebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).DeleteGuidebook(ctx, req.(*DeleteGuidebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_GetGuidebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuidebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).GetGuidebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_GetGuidebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).GetGuidebook(ctx, req.(*GetGuidebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_ListRecentlyViewedGuidebooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentlyViewedGuidebooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).ListRecentlyViewedGuidebooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_ListRecentlyViewedGuidebooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).ListRecentlyViewedGuidebooks(ctx, req.(*ListRecentlyViewedGuidebooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_PublishGuidebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishGuidebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).PublishGuidebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_PublishGuidebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).PublishGuidebook(ctx, req.(*PublishGuidebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_GetGuidebookDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGuidebookDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).GetGuidebookDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_GetGuidebookDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).GetGuidebookDetails(ctx, req.(*GetGuidebookDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_ShareGuidebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareGuidebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).ShareGuidebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_ShareGuidebook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).ShareGuidebook(ctx, req.(*ShareGuidebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabsTailwindGuidebooksService_GuidebookGenerateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuidebookGenerateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabsTailwindGuidebooksServiceServer).GuidebookGenerateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabsTailwindGuidebooksService_GuidebookGenerateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabsTailwindGuidebooksServiceServer).GuidebookGenerateAnswer(ctx, req.(*GuidebookGenerateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabsTailwindGuidebooksService_ServiceDesc is the grpc.ServiceDesc for LabsTailwindGuidebooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabsTailwindGuidebooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notebooklm.v1alpha1.LabsTailwindGuidebooksService",
	HandlerType: (*LabsTailwindGuidebooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteGuidebook",
			Handler:    _LabsTailwindGuidebooksService_DeleteGuidebook_Handler,
		},
		{
			MethodName: "GetGuidebook",
			Handler:    _LabsTailwindGuidebooksService_GetGuidebook_Handler,
		},
		{
			MethodName: "ListRecentlyViewedGuidebooks",
			Handler:    _LabsTailwindGuidebooksService_ListRecentlyViewedGuidebooks_Handler,
		},
		{
			MethodName: "PublishGuidebook",
			Handler:    _LabsTailwindGuidebooksService_PublishGuidebook_Handler,
		},
		{
			MethodName: "GetGuidebookDetails",
			Handler:    _LabsTailwindGuidebooksService_GetGuidebookDetails_Handler,
		},
		{
			MethodName: "ShareGuidebook",
			Handler:    _LabsTailwindGuidebooksService_ShareGuidebook_Handler,
		},
		{
			MethodName: "GuidebookGenerateAnswer",
			Handler:    _LabsTailwindGuidebooksService_GuidebookGenerateAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notebooklm/v1alpha1/sharing.proto",
}
