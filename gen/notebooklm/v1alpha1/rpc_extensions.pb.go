// RPC extensions for NotebookLM batchexecute API

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: notebooklm/v1alpha1/rpc_extensions.proto

package notebooklmv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// How to handle empty/zero values
type BatchExecuteEncoding_EmptyValueHandling int32

const (
	BatchExecuteEncoding_EMPTY_VALUE_DEFAULT     BatchExecuteEncoding_EmptyValueHandling = 0
	BatchExecuteEncoding_EMPTY_VALUE_NULL        BatchExecuteEncoding_EmptyValueHandling = 1
	BatchExecuteEncoding_EMPTY_VALUE_OMIT        BatchExecuteEncoding_EmptyValueHandling = 2
	BatchExecuteEncoding_EMPTY_VALUE_EMPTY_ARRAY BatchExecuteEncoding_EmptyValueHandling = 3
)

// Enum value maps for BatchExecuteEncoding_EmptyValueHandling.
var (
	BatchExecuteEncoding_EmptyValueHandling_name = map[int32]string{
		0: "EMPTY_VALUE_DEFAULT",
		1: "EMPTY_VALUE_NULL",
		2: "EMPTY_VALUE_OMIT",
		3: "EMPTY_VALUE_EMPTY_ARRAY",
	}
	BatchExecuteEncoding_EmptyValueHandling_value = map[string]int32{
		"EMPTY_VALUE_DEFAULT":     0,
		"EMPTY_VALUE_NULL":        1,
		"EMPTY_VALUE_OMIT":        2,
		"EMPTY_VALUE_EMPTY_ARRAY": 3,
	}
)

func (x BatchExecuteEncoding_EmptyValueHandling) Enum() *BatchExecuteEncoding_EmptyValueHandling {
	p := new(BatchExecuteEncoding_EmptyValueHandling)
	*p = x
	return p
}

func (x BatchExecuteEncoding_EmptyValueHandling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchExecuteEncoding_EmptyValueHandling) Descriptor() protoreflect.EnumDescriptor {
	return file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes[0].Descriptor()
}

func (BatchExecuteEncoding_EmptyValueHandling) Type() protoreflect.EnumType {
	return &file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes[0]
}

func (x BatchExecuteEncoding_EmptyValueHandling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchExecuteEncoding_EmptyValueHandling.Descriptor instead.
func (BatchExecuteEncoding_EmptyValueHandling) EnumDescriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescGZIP(), []int{0, 0}
}

// How to encode arrays
type BatchExecuteEncoding_ArrayEncoding int32

const (
	BatchExecuteEncoding_ARRAY_DEFAULT BatchExecuteEncoding_ArrayEncoding = 0
	BatchExecuteEncoding_ARRAY_NESTED  BatchExecuteEncoding_ArrayEncoding = 1 // [[item1], [item2]]
	BatchExecuteEncoding_ARRAY_FLAT    BatchExecuteEncoding_ArrayEncoding = 2 // [item1, item2]
	BatchExecuteEncoding_ARRAY_WRAPPED BatchExecuteEncoding_ArrayEncoding = 3 // [[[item1, item2]]]
)

// Enum value maps for BatchExecuteEncoding_ArrayEncoding.
var (
	BatchExecuteEncoding_ArrayEncoding_name = map[int32]string{
		0: "ARRAY_DEFAULT",
		1: "ARRAY_NESTED",
		2: "ARRAY_FLAT",
		3: "ARRAY_WRAPPED",
	}
	BatchExecuteEncoding_ArrayEncoding_value = map[string]int32{
		"ARRAY_DEFAULT": 0,
		"ARRAY_NESTED":  1,
		"ARRAY_FLAT":    2,
		"ARRAY_WRAPPED": 3,
	}
)

func (x BatchExecuteEncoding_ArrayEncoding) Enum() *BatchExecuteEncoding_ArrayEncoding {
	p := new(BatchExecuteEncoding_ArrayEncoding)
	*p = x
	return p
}

func (x BatchExecuteEncoding_ArrayEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatchExecuteEncoding_ArrayEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes[1].Descriptor()
}

func (BatchExecuteEncoding_ArrayEncoding) Type() protoreflect.EnumType {
	return &file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes[1]
}

func (x BatchExecuteEncoding_ArrayEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatchExecuteEncoding_ArrayEncoding.Descriptor instead.
func (BatchExecuteEncoding_ArrayEncoding) EnumDescriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescGZIP(), []int{0, 1}
}

// Encoding hints for batchexecute format
type BatchExecuteEncoding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatchExecuteEncoding) Reset() {
	*x = BatchExecuteEncoding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_rpc_extensions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchExecuteEncoding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExecuteEncoding) ProtoMessage() {}

func (x *BatchExecuteEncoding) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_rpc_extensions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExecuteEncoding.ProtoReflect.Descriptor instead.
func (*BatchExecuteEncoding) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescGZIP(), []int{0}
}

var file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51000,
		Name:          "notebooklm.v1alpha1.rpc_id",
		Tag:           "bytes,51000,opt,name=rpc_id",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51001,
		Name:          "notebooklm.v1alpha1.arg_format",
		Tag:           "bytes,51001,opt,name=arg_format",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         51002,
		Name:          "notebooklm.v1alpha1.chunked_response",
		Tag:           "varint,51002,opt,name=chunked_response",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51003,
		Name:          "notebooklm.v1alpha1.response_parser",
		Tag:           "bytes,51003,opt,name=response_parser",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51004,
		Name:          "notebooklm.v1alpha1.grpc_endpoint",
		Tag:           "bytes,51004,opt,name=grpc_endpoint",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         51005,
		Name:          "notebooklm.v1alpha1.requires_sources",
		Tag:           "varint,51005,opt,name=requires_sources",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51006,
		Name:          "notebooklm.v1alpha1.grpc_arg_format",
		Tag:           "bytes,51006,opt,name=grpc_arg_format",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51010,
		Name:          "notebooklm.v1alpha1.batchexecute_encoding",
		Tag:           "bytes,51010,opt,name=batchexecute_encoding",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51011,
		Name:          "notebooklm.v1alpha1.arg_key",
		Tag:           "bytes,51011,opt,name=arg_key",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51020,
		Name:          "notebooklm.v1alpha1.batchexecute_app",
		Tag:           "bytes,51020,opt,name=batchexecute_app",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         51021,
		Name:          "notebooklm.v1alpha1.batchexecute_host",
		Tag:           "bytes,51021,opt,name=batchexecute_host",
		Filename:      "notebooklm/v1alpha1/rpc_extensions.proto",
	},
}

// Extension fields to descriptorpb.MethodOptions.
var (
	// The RPC endpoint ID used in batchexecute calls
	//
	// optional string rpc_id = 51000;
	E_RpcId = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[0]
	// The argument encoding format for the RPC
	// Can contain placeholders that map to request message fields
	// Examples:
	//
	//	"[null, %limit%]" - simple format with one field
	//	"[null, %limit%, null, %options%]" - format with multiple fields
	//	"[[%sources%], %project_id%]" - nested format
	//
	// optional string arg_format = 51001;
	E_ArgFormat = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[1]
	// Whether this RPC uses chunked response format
	//
	// optional bool chunked_response = 51002;
	E_ChunkedResponse = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[2]
	// Custom response parser hint
	//
	// optional string response_parser = 51003;
	E_ResponseParser = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[3]
	// gRPC-style endpoint path (for newer APIs)
	// Example: "/google.internal.labs.tailwind.orchestration.v1.LabsTailwindOrchestrationService/GenerateFreeFormStreamed"
	//
	// optional string grpc_endpoint = 51004;
	E_GrpcEndpoint = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[4]
	// Whether this RPC requires all source IDs to be included
	//
	// optional bool requires_sources = 51005;
	E_RequiresSources = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[5]
	// Custom request format for gRPC-style endpoints
	// Can use special tokens like:
	//
	//	"%all_sources%" - array of all source IDs from the notebook
	//	"%prompt%" - the user's prompt/query
	//
	// Example: "[[%all_sources%], %prompt%, null, [2]]"
	//
	// optional string grpc_arg_format = 51006;
	E_GrpcArgFormat = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[6]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// How to encode this field in batchexecute format
	// Examples:
	//
	//	"array" - encode as array even if single value
	//	"string" - always encode as string
	//	"number" - encode as number
	//	"null_if_empty" - encode as null if field is empty/zero
	//
	// optional string batchexecute_encoding = 51010;
	E_BatchexecuteEncoding = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[7]
	// The key to use when this field appears in argument format
	// e.g., if arg_format is "[null, %page_size%]" then a field with
	// arg_key = "page_size" will be substituted there
	//
	// optional string arg_key = 51011;
	E_ArgKey = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[8]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// The batchexecute app name for this service
	//
	// optional string batchexecute_app = 51020;
	E_BatchexecuteApp = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[9]
	// The host for this service
	//
	// optional string batchexecute_host = 51021;
	E_BatchexecuteHost = &file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes[10]
)

var File_notebooklm_v1alpha1_rpc_extensions_proto protoreflect.FileDescriptor

var file_notebooklm_v1alpha1_rpc_extensions_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x76, 0x0a, 0x12, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f,
	0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f,
	0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x10, 0x03, 0x22, 0x57, 0x0a, 0x0d, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f,
	0x4e, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x37, 0x0a, 0x06, 0x72,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x70, 0x63, 0x49, 0x64, 0x3a, 0x3f, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xb9, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x4b, 0x0a, 0x10, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xba, 0x8e, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x3a, 0x49, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbb, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x3a, 0x45, 0x0a,
	0x0d, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbc,
	0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x3a, 0x4b, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbd, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x3a, 0x48, 0x0a, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xbe, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x72,
	0x70, 0x63, 0x41, 0x72, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x54, 0x0a, 0x15, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xc2, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x3a, 0x38, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3, 0x8e, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x67, 0x4b, 0x65, 0x79, 0x3a, 0x4c, 0x0a, 0x10, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x12,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xcc, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x70, 0x70, 0x3a, 0x4e, 0x0a, 0x11, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xcd, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x42, 0xd9, 0x01, 0x0a, 0x17, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x12, 0x52, 0x70, 0x63, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6e, 0x6c, 0x6d, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58,
	0xaa, 0x02, 0x13, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x13, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x4e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x14, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescOnce sync.Once
	file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescData = file_notebooklm_v1alpha1_rpc_extensions_proto_rawDesc
)

func file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescGZIP() []byte {
	file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescOnce.Do(func() {
		file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescData = protoimpl.X.CompressGZIP(file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescData)
	})
	return file_notebooklm_v1alpha1_rpc_extensions_proto_rawDescData
}

var file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_notebooklm_v1alpha1_rpc_extensions_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_notebooklm_v1alpha1_rpc_extensions_proto_goTypes = []interface{}{
	(BatchExecuteEncoding_EmptyValueHandling)(0), // 0: notebooklm.v1alpha1.BatchExecuteEncoding.EmptyValueHandling
	(BatchExecuteEncoding_ArrayEncoding)(0),      // 1: notebooklm.v1alpha1.BatchExecuteEncoding.ArrayEncoding
	(*BatchExecuteEncoding)(nil),                 // 2: notebooklm.v1alpha1.BatchExecuteEncoding
	(*descriptorpb.MethodOptions)(nil),           // 3: google.protobuf.MethodOptions
	(*descriptorpb.FieldOptions)(nil),            // 4: google.protobuf.FieldOptions
	(*descriptorpb.ServiceOptions)(nil),          // 5: google.protobuf.ServiceOptions
}
var file_notebooklm_v1alpha1_rpc_extensions_proto_depIdxs = []int32{
	3,  // 0: notebooklm.v1alpha1.rpc_id:extendee -> google.protobuf.MethodOptions
	3,  // 1: notebooklm.v1alpha1.arg_format:extendee -> google.protobuf.MethodOptions
	3,  // 2: notebooklm.v1alpha1.chunked_response:extendee -> google.protobuf.MethodOptions
	3,  // 3: notebooklm.v1alpha1.response_parser:extendee -> google.protobuf.MethodOptions
	3,  // 4: notebooklm.v1alpha1.grpc_endpoint:extendee -> google.protobuf.MethodOptions
	3,  // 5: notebooklm.v1alpha1.requires_sources:extendee -> google.protobuf.MethodOptions
	3,  // 6: notebooklm.v1alpha1.grpc_arg_format:extendee -> google.protobuf.MethodOptions
	4,  // 7: notebooklm.v1alpha1.batchexecute_encoding:extendee -> google.protobuf.FieldOptions
	4,  // 8: notebooklm.v1alpha1.arg_key:extendee -> google.protobuf.FieldOptions
	5,  // 9: notebooklm.v1alpha1.batchexecute_app:extendee -> google.protobuf.ServiceOptions
	5,  // 10: notebooklm.v1alpha1.batchexecute_host:extendee -> google.protobuf.ServiceOptions
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	0,  // [0:11] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_notebooklm_v1alpha1_rpc_extensions_proto_init() }
func file_notebooklm_v1alpha1_rpc_extensions_proto_init() {
	if File_notebooklm_v1alpha1_rpc_extensions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_notebooklm_v1alpha1_rpc_extensions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchExecuteEncoding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notebooklm_v1alpha1_rpc_extensions_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 11,
			NumServices:   0,
		},
		GoTypes:           file_notebooklm_v1alpha1_rpc_extensions_proto_goTypes,
		DependencyIndexes: file_notebooklm_v1alpha1_rpc_extensions_proto_depIdxs,
		EnumInfos:         file_notebooklm_v1alpha1_rpc_extensions_proto_enumTypes,
		MessageInfos:      file_notebooklm_v1alpha1_rpc_extensions_proto_msgTypes,
		ExtensionInfos:    file_notebooklm_v1alpha1_rpc_extensions_proto_extTypes,
	}.Build()
	File_notebooklm_v1alpha1_rpc_extensions_proto = out.File
	file_notebooklm_v1alpha1_rpc_extensions_proto_rawDesc = nil
	file_notebooklm_v1alpha1_rpc_extensions_proto_goTypes = nil
	file_notebooklm_v1alpha1_rpc_extensions_proto_depIdxs = nil
}
