// Orchestration service definitions discovered from JavaScript analysis

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: notebooklm/v1alpha1/orchestration.proto

package notebooklmv1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtifactType int32

const (
	ArtifactType_ARTIFACT_TYPE_UNSPECIFIED    ArtifactType = 0
	ArtifactType_ARTIFACT_TYPE_NOTE           ArtifactType = 1
	ArtifactType_ARTIFACT_TYPE_AUDIO_OVERVIEW ArtifactType = 2
	ArtifactType_ARTIFACT_TYPE_REPORT         ArtifactType = 3
	ArtifactType_ARTIFACT_TYPE_APP            ArtifactType = 4
)

// Enum value maps for ArtifactType.
var (
	ArtifactType_name = map[int32]string{
		0: "ARTIFACT_TYPE_UNSPECIFIED",
		1: "ARTIFACT_TYPE_NOTE",
		2: "ARTIFACT_TYPE_AUDIO_OVERVIEW",
		3: "ARTIFACT_TYPE_REPORT",
		4: "ARTIFACT_TYPE_APP",
	}
	ArtifactType_value = map[string]int32{
		"ARTIFACT_TYPE_UNSPECIFIED":    0,
		"ARTIFACT_TYPE_NOTE":           1,
		"ARTIFACT_TYPE_AUDIO_OVERVIEW": 2,
		"ARTIFACT_TYPE_REPORT":         3,
		"ARTIFACT_TYPE_APP":            4,
	}
)

func (x ArtifactType) Enum() *ArtifactType {
	p := new(ArtifactType)
	*p = x
	return p
}

func (x ArtifactType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactType) Descriptor() protoreflect.EnumDescriptor {
	return file_notebooklm_v1alpha1_orchestration_proto_enumTypes[0].Descriptor()
}

func (ArtifactType) Type() protoreflect.EnumType {
	return &file_notebooklm_v1alpha1_orchestration_proto_enumTypes[0]
}

func (x ArtifactType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactType.Descriptor instead.
func (ArtifactType) EnumDescriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{0}
}

type ArtifactState int32

const (
	ArtifactState_ARTIFACT_STATE_UNSPECIFIED ArtifactState = 0
	ArtifactState_ARTIFACT_STATE_CREATING    ArtifactState = 1
	ArtifactState_ARTIFACT_STATE_READY       ArtifactState = 2
	ArtifactState_ARTIFACT_STATE_FAILED      ArtifactState = 3
)

// Enum value maps for ArtifactState.
var (
	ArtifactState_name = map[int32]string{
		0: "ARTIFACT_STATE_UNSPECIFIED",
		1: "ARTIFACT_STATE_CREATING",
		2: "ARTIFACT_STATE_READY",
		3: "ARTIFACT_STATE_FAILED",
	}
	ArtifactState_value = map[string]int32{
		"ARTIFACT_STATE_UNSPECIFIED": 0,
		"ARTIFACT_STATE_CREATING":    1,
		"ARTIFACT_STATE_READY":       2,
		"ARTIFACT_STATE_FAILED":      3,
	}
)

func (x ArtifactState) Enum() *ArtifactState {
	p := new(ArtifactState)
	*p = x
	return p
}

func (x ArtifactState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactState) Descriptor() protoreflect.EnumDescriptor {
	return file_notebooklm_v1alpha1_orchestration_proto_enumTypes[1].Descriptor()
}

func (ArtifactState) Type() protoreflect.EnumType {
	return &file_notebooklm_v1alpha1_orchestration_proto_enumTypes[1]
}

func (x ArtifactState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactState.Descriptor instead.
func (ArtifactState) EnumDescriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{1}
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Context information, structure inferred from usage
	ProjectId string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SourceIds []string `protobuf:"bytes,2,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{0}
}

func (x *Context) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Context) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

type Artifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId     string            `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
	ProjectId      string            `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Type           ArtifactType      `protobuf:"varint,3,opt,name=type,proto3,enum=notebooklm.v1alpha1.ArtifactType" json:"type,omitempty"`
	Sources        []*ArtifactSource `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	State          ArtifactState     `protobuf:"varint,5,opt,name=state,proto3,enum=notebooklm.v1alpha1.ArtifactState" json:"state,omitempty"`
	Note           *Source           `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"` // Note is a special type of Source
	AudioOverview  *AudioOverview    `protobuf:"bytes,8,opt,name=audio_overview,json=audioOverview,proto3" json:"audio_overview,omitempty"`
	TailoredReport *Report           `protobuf:"bytes,9,opt,name=tailored_report,json=tailoredReport,proto3" json:"tailored_report,omitempty"`
	App            *App              `protobuf:"bytes,10,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{1}
}

func (x *Artifact) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

func (x *Artifact) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Artifact) GetType() ArtifactType {
	if x != nil {
		return x.Type
	}
	return ArtifactType_ARTIFACT_TYPE_UNSPECIFIED
}

func (x *Artifact) GetSources() []*ArtifactSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Artifact) GetState() ArtifactState {
	if x != nil {
		return x.State
	}
	return ArtifactState_ARTIFACT_STATE_UNSPECIFIED
}

func (x *Artifact) GetNote() *Source {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *Artifact) GetAudioOverview() *AudioOverview {
	if x != nil {
		return x.AudioOverview
	}
	return nil
}

func (x *Artifact) GetTailoredReport() *Report {
	if x != nil {
		return x.TailoredReport
	}
	return nil
}

func (x *Artifact) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

type ArtifactSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId      *SourceId       `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	TextFragments []*TextFragment `protobuf:"bytes,2,rep,name=text_fragments,json=textFragments,proto3" json:"text_fragments,omitempty"`
}

func (x *ArtifactSource) Reset() {
	*x = ArtifactSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSource) ProtoMessage() {}

func (x *ArtifactSource) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSource.ProtoReflect.Descriptor instead.
func (*ArtifactSource) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactSource) GetSourceId() *SourceId {
	if x != nil {
		return x.SourceId
	}
	return nil
}

func (x *ArtifactSource) GetTextFragments() []*TextFragment {
	if x != nil {
		return x.TextFragments
	}
	return nil
}

type TextFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text        string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	StartOffset int32  `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   int32  `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *TextFragment) Reset() {
	*x = TextFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextFragment) ProtoMessage() {}

func (x *TextFragment) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextFragment.ProtoReflect.Descriptor instead.
func (*TextFragment) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{3}
}

func (x *TextFragment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TextFragment) GetStartOffset() int32 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *TextFragment) GetEndOffset() int32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content  string     `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Sections []*Section `protobuf:"bytes,3,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{4}
}

func (x *Report) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Report) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Report) GetSections() []*Section {
	if x != nil {
		return x.Sections
	}
	return nil
}

type Section struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Section) Reset() {
	*x = Section{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Section) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Section) ProtoMessage() {}

func (x *Section) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Section.ProtoReflect.Descriptor instead.
func (*Section) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{5}
}

func (x *Section) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Section) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{6}
}

func (x *App) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *Context  `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	ProjectId string    `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Artifact  *Artifact `protobuf:"bytes,3,opt,name=artifact,proto3" json:"artifact,omitempty"`
}

func (x *CreateArtifactRequest) Reset() {
	*x = CreateArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateArtifactRequest) ProtoMessage() {}

func (x *CreateArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateArtifactRequest.ProtoReflect.Descriptor instead.
func (*CreateArtifactRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{7}
}

func (x *CreateArtifactRequest) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CreateArtifactRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateArtifactRequest) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

type GetArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
}

func (x *GetArtifactRequest) Reset() {
	*x = GetArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactRequest) ProtoMessage() {}

func (x *GetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactRequest.ProtoReflect.Descriptor instead.
func (*GetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{8}
}

func (x *GetArtifactRequest) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

type UpdateArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifact   *Artifact              `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateArtifactRequest) Reset() {
	*x = UpdateArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateArtifactRequest) ProtoMessage() {}

func (x *UpdateArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateArtifactRequest.ProtoReflect.Descriptor instead.
func (*UpdateArtifactRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateArtifactRequest) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *UpdateArtifactRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteArtifactRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArtifactId string `protobuf:"bytes,1,opt,name=artifact_id,json=artifactId,proto3" json:"artifact_id,omitempty"`
}

func (x *DeleteArtifactRequest) Reset() {
	*x = DeleteArtifactRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArtifactRequest) ProtoMessage() {}

func (x *DeleteArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArtifactRequest.ProtoReflect.Descriptor instead.
func (*DeleteArtifactRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteArtifactRequest) GetArtifactId() string {
	if x != nil {
		return x.ArtifactId
	}
	return ""
}

type ListArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageSize  int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListArtifactsRequest) Reset() {
	*x = ListArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactsRequest) ProtoMessage() {}

func (x *ListArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ListArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{11}
}

func (x *ListArtifactsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListArtifactsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListArtifactsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Artifacts     []*Artifact `protobuf:"bytes,1,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	NextPageToken string      `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListArtifactsResponse) Reset() {
	*x = ListArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListArtifactsResponse) ProtoMessage() {}

func (x *ListArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListArtifactsResponse.ProtoReflect.Descriptor instead.
func (*ListArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{12}
}

func (x *ListArtifactsResponse) GetArtifacts() []*Artifact {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ListArtifactsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ActOnSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Action    string   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	SourceIds []string `protobuf:"bytes,3,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
}

func (x *ActOnSourcesRequest) Reset() {
	*x = ActOnSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActOnSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActOnSourcesRequest) ProtoMessage() {}

func (x *ActOnSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActOnSourcesRequest.ProtoReflect.Descriptor instead.
func (*ActOnSourcesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{13}
}

func (x *ActOnSourcesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ActOnSourcesRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *ActOnSourcesRequest) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

type CreateAudioOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	AudioType    int32    `protobuf:"varint,2,opt,name=audio_type,json=audioType,proto3" json:"audio_type,omitempty"`
	Instructions []string `protobuf:"bytes,3,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *CreateAudioOverviewRequest) Reset() {
	*x = CreateAudioOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAudioOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAudioOverviewRequest) ProtoMessage() {}

func (x *CreateAudioOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAudioOverviewRequest.ProtoReflect.Descriptor instead.
func (*CreateAudioOverviewRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{14}
}

func (x *CreateAudioOverviewRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateAudioOverviewRequest) GetAudioType() int32 {
	if x != nil {
		return x.AudioType
	}
	return 0
}

func (x *CreateAudioOverviewRequest) GetInstructions() []string {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type GetAudioOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RequestType int32  `protobuf:"varint,2,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
}

func (x *GetAudioOverviewRequest) Reset() {
	*x = GetAudioOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioOverviewRequest) ProtoMessage() {}

func (x *GetAudioOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioOverviewRequest.ProtoReflect.Descriptor instead.
func (*GetAudioOverviewRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{15}
}

func (x *GetAudioOverviewRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetAudioOverviewRequest) GetRequestType() int32 {
	if x != nil {
		return x.RequestType
	}
	return 0
}

type DeleteAudioOverviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *DeleteAudioOverviewRequest) Reset() {
	*x = DeleteAudioOverviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAudioOverviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAudioOverviewRequest) ProtoMessage() {}

func (x *DeleteAudioOverviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAudioOverviewRequest.ProtoReflect.Descriptor instead.
func (*DeleteAudioOverviewRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteAudioOverviewRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type DiscoverSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Query     string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *DiscoverSourcesRequest) Reset() {
	*x = DiscoverSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverSourcesRequest) ProtoMessage() {}

func (x *DiscoverSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverSourcesRequest.ProtoReflect.Descriptor instead.
func (*DiscoverSourcesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{17}
}

func (x *DiscoverSourcesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DiscoverSourcesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type DiscoverSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *DiscoverSourcesResponse) Reset() {
	*x = DiscoverSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoverSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoverSourcesResponse) ProtoMessage() {}

func (x *DiscoverSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoverSourcesResponse.ProtoReflect.Descriptor instead.
func (*DiscoverSourcesResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{18}
}

func (x *DiscoverSourcesResponse) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

type GenerateFreeFormStreamedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Prompt    string   `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	SourceIds []string `protobuf:"bytes,3,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
}

func (x *GenerateFreeFormStreamedRequest) Reset() {
	*x = GenerateFreeFormStreamedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFreeFormStreamedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFreeFormStreamedRequest) ProtoMessage() {}

func (x *GenerateFreeFormStreamedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFreeFormStreamedRequest.ProtoReflect.Descriptor instead.
func (*GenerateFreeFormStreamedRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{19}
}

func (x *GenerateFreeFormStreamedRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GenerateFreeFormStreamedRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *GenerateFreeFormStreamedRequest) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

type GenerateFreeFormStreamedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk   string `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	IsFinal bool   `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
}

func (x *GenerateFreeFormStreamedResponse) Reset() {
	*x = GenerateFreeFormStreamedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFreeFormStreamedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFreeFormStreamedResponse) ProtoMessage() {}

func (x *GenerateFreeFormStreamedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFreeFormStreamedResponse.ProtoReflect.Descriptor instead.
func (*GenerateFreeFormStreamedResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{20}
}

func (x *GenerateFreeFormStreamedResponse) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *GenerateFreeFormStreamedResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type GenerateReportSuggestionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GenerateReportSuggestionsRequest) Reset() {
	*x = GenerateReportSuggestionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReportSuggestionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReportSuggestionsRequest) ProtoMessage() {}

func (x *GenerateReportSuggestionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReportSuggestionsRequest.ProtoReflect.Descriptor instead.
func (*GenerateReportSuggestionsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{21}
}

func (x *GenerateReportSuggestionsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GenerateReportSuggestionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suggestions []string `protobuf:"bytes,1,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *GenerateReportSuggestionsResponse) Reset() {
	*x = GenerateReportSuggestionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateReportSuggestionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateReportSuggestionsResponse) ProtoMessage() {}

func (x *GenerateReportSuggestionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateReportSuggestionsResponse.ProtoReflect.Descriptor instead.
func (*GenerateReportSuggestionsResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{22}
}

func (x *GenerateReportSuggestionsResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

type GetProjectAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetProjectAnalyticsRequest) Reset() {
	*x = GetProjectAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectAnalyticsRequest) ProtoMessage() {}

func (x *GetProjectAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{23}
}

func (x *GetProjectAnalyticsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ProjectAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceCount        int32                  `protobuf:"varint,1,opt,name=source_count,json=sourceCount,proto3" json:"source_count,omitempty"`
	NoteCount          int32                  `protobuf:"varint,2,opt,name=note_count,json=noteCount,proto3" json:"note_count,omitempty"`
	AudioOverviewCount int32                  `protobuf:"varint,3,opt,name=audio_overview_count,json=audioOverviewCount,proto3" json:"audio_overview_count,omitempty"`
	LastAccessed       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_accessed,json=lastAccessed,proto3" json:"last_accessed,omitempty"`
}

func (x *ProjectAnalytics) Reset() {
	*x = ProjectAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectAnalytics) ProtoMessage() {}

func (x *ProjectAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectAnalytics.ProtoReflect.Descriptor instead.
func (*ProjectAnalytics) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{24}
}

func (x *ProjectAnalytics) GetSourceCount() int32 {
	if x != nil {
		return x.SourceCount
	}
	return 0
}

func (x *ProjectAnalytics) GetNoteCount() int32 {
	if x != nil {
		return x.NoteCount
	}
	return 0
}

func (x *ProjectAnalytics) GetAudioOverviewCount() int32 {
	if x != nil {
		return x.AudioOverviewCount
	}
	return 0
}

func (x *ProjectAnalytics) GetLastAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessed
	}
	return nil
}

type ListFeaturedProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListFeaturedProjectsRequest) Reset() {
	*x = ListFeaturedProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturedProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturedProjectsRequest) ProtoMessage() {}

func (x *ListFeaturedProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturedProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListFeaturedProjectsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{25}
}

func (x *ListFeaturedProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListFeaturedProjectsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListFeaturedProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects      []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	NextPageToken string     `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListFeaturedProjectsResponse) Reset() {
	*x = ListFeaturedProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFeaturedProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFeaturedProjectsResponse) ProtoMessage() {}

func (x *ListFeaturedProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFeaturedProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListFeaturedProjectsResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{26}
}

func (x *ListFeaturedProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListFeaturedProjectsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Update existing request messages to match Gemini's findings
type AddSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources   []*SourceInput `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	ProjectId string         `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *AddSourceRequest) Reset() {
	*x = AddSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSourceRequest) ProtoMessage() {}

func (x *AddSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSourceRequest.ProtoReflect.Descriptor instead.
func (*AddSourceRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{27}
}

func (x *AddSourceRequest) GetSources() []*SourceInput {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *AddSourceRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type SourceInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For text sources
	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// For file upload
	Base64Content string `protobuf:"bytes,3,opt,name=base64_content,json=base64Content,proto3" json:"base64_content,omitempty"`
	Filename      string `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	MimeType      string `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// For URL sources
	Url string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// For YouTube
	YoutubeVideoId string     `protobuf:"bytes,7,opt,name=youtube_video_id,json=youtubeVideoId,proto3" json:"youtube_video_id,omitempty"`
	SourceType     SourceType `protobuf:"varint,8,opt,name=source_type,json=sourceType,proto3,enum=notebooklm.v1alpha1.SourceType" json:"source_type,omitempty"`
}

func (x *SourceInput) Reset() {
	*x = SourceInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceInput) ProtoMessage() {}

func (x *SourceInput) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceInput.ProtoReflect.Descriptor instead.
func (*SourceInput) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{28}
}

func (x *SourceInput) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SourceInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SourceInput) GetBase64Content() string {
	if x != nil {
		return x.Base64Content
	}
	return ""
}

func (x *SourceInput) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *SourceInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *SourceInput) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SourceInput) GetYoutubeVideoId() string {
	if x != nil {
		return x.YoutubeVideoId
	}
	return ""
}

func (x *SourceInput) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

type CreateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string  `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Content   string  `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	NoteType  []int32 `protobuf:"varint,3,rep,packed,name=note_type,json=noteType,proto3" json:"note_type,omitempty"`
	Title     string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *CreateNoteRequest) Reset() {
	*x = CreateNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNoteRequest) ProtoMessage() {}

func (x *CreateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNoteRequest.ProtoReflect.Descriptor instead.
func (*CreateNoteRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{29}
}

func (x *CreateNoteRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateNoteRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateNoteRequest) GetNoteType() []int32 {
	if x != nil {
		return x.NoteType
	}
	return nil
}

func (x *CreateNoteRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type DeleteNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteIds []string `protobuf:"bytes,1,rep,name=note_ids,json=noteIds,proto3" json:"note_ids,omitempty"`
}

func (x *DeleteNotesRequest) Reset() {
	*x = DeleteNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNotesRequest) ProtoMessage() {}

func (x *DeleteNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNotesRequest.ProtoReflect.Descriptor instead.
func (*DeleteNotesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteNotesRequest) GetNoteIds() []string {
	if x != nil {
		return x.NoteIds
	}
	return nil
}

type GetNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetNotesRequest) Reset() {
	*x = GetNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotesRequest) ProtoMessage() {}

func (x *GetNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotesRequest.ProtoReflect.Descriptor instead.
func (*GetNotesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{31}
}

func (x *GetNotesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type MutateNoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string        `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	NoteId    string        `protobuf:"bytes,2,opt,name=note_id,json=noteId,proto3" json:"note_id,omitempty"`
	Updates   []*NoteUpdate `protobuf:"bytes,3,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *MutateNoteRequest) Reset() {
	*x = MutateNoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateNoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateNoteRequest) ProtoMessage() {}

func (x *MutateNoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateNoteRequest.ProtoReflect.Descriptor instead.
func (*MutateNoteRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{32}
}

func (x *MutateNoteRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MutateNoteRequest) GetNoteId() string {
	if x != nil {
		return x.NoteId
	}
	return ""
}

func (x *MutateNoteRequest) GetUpdates() []*NoteUpdate {
	if x != nil {
		return x.Updates
	}
	return nil
}

type NoteUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Title   string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *NoteUpdate) Reset() {
	*x = NoteUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteUpdate) ProtoMessage() {}

func (x *NoteUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteUpdate.ProtoReflect.Descriptor instead.
func (*NoteUpdate) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{33}
}

func (x *NoteUpdate) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NoteUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NoteUpdate) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Account management
type GetOrCreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrCreateAccountRequest) Reset() {
	*x = GetOrCreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateAccountRequest) ProtoMessage() {}

func (x *GetOrCreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateAccountRequest.ProtoReflect.Descriptor instead.
func (*GetOrCreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{34}
}

type MutateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    *Account               `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *MutateAccountRequest) Reset() {
	*x = MutateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateAccountRequest) ProtoMessage() {}

func (x *MutateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateAccountRequest.ProtoReflect.Descriptor instead.
func (*MutateAccountRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{35}
}

func (x *MutateAccountRequest) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *MutateAccountRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string           `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Email     string           `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Settings  *AccountSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{36}
}

func (x *Account) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Account) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Account) GetSettings() *AccountSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type AccountSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmailNotifications  bool   `protobuf:"varint,1,opt,name=email_notifications,json=emailNotifications,proto3" json:"email_notifications,omitempty"`
	DefaultProjectEmoji string `protobuf:"bytes,2,opt,name=default_project_emoji,json=defaultProjectEmoji,proto3" json:"default_project_emoji,omitempty"`
}

func (x *AccountSettings) Reset() {
	*x = AccountSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountSettings) ProtoMessage() {}

func (x *AccountSettings) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountSettings.ProtoReflect.Descriptor instead.
func (*AccountSettings) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{37}
}

func (x *AccountSettings) GetEmailNotifications() bool {
	if x != nil {
		return x.EmailNotifications
	}
	return false
}

func (x *AccountSettings) GetDefaultProjectEmoji() string {
	if x != nil {
		return x.DefaultProjectEmoji
	}
	return ""
}

// Placeholder messages that need to be defined
type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Emoji string `protobuf:"bytes,2,opt,name=emoji,proto3" json:"emoji,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{38}
}

func (x *CreateProjectRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateProjectRequest) GetEmoji() string {
	if x != nil {
		return x.Emoji
	}
	return ""
}

type DeleteProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectIds []string `protobuf:"bytes,1,rep,name=project_ids,json=projectIds,proto3" json:"project_ids,omitempty"`
}

func (x *DeleteProjectsRequest) Reset() {
	*x = DeleteProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectsRequest) ProtoMessage() {}

func (x *DeleteProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectsRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{39}
}

func (x *DeleteProjectsRequest) GetProjectIds() []string {
	if x != nil {
		return x.ProjectIds
	}
	return nil
}

type DeleteSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIds []string `protobuf:"bytes,1,rep,name=source_ids,json=sourceIds,proto3" json:"source_ids,omitempty"`
}

func (x *DeleteSourcesRequest) Reset() {
	*x = DeleteSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSourcesRequest) ProtoMessage() {}

func (x *DeleteSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteSourcesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteSourcesRequest) GetSourceIds() []string {
	if x != nil {
		return x.SourceIds
	}
	return nil
}

type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{41}
}

func (x *GetProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListRecentlyViewedProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter  *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Options []int32                `protobuf:"varint,4,rep,packed,name=options,proto3" json:"options,omitempty"`
}

func (x *ListRecentlyViewedProjectsRequest) Reset() {
	*x = ListRecentlyViewedProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecentlyViewedProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecentlyViewedProjectsRequest) ProtoMessage() {}

func (x *ListRecentlyViewedProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecentlyViewedProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListRecentlyViewedProjectsRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{42}
}

func (x *ListRecentlyViewedProjectsRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *ListRecentlyViewedProjectsRequest) GetOffset() *wrapperspb.Int32Value {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *ListRecentlyViewedProjectsRequest) GetFilter() *wrapperspb.Int32Value {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRecentlyViewedProjectsRequest) GetOptions() []int32 {
	if x != nil {
		return x.Options
	}
	return nil
}

type MutateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Updates   *Project `protobuf:"bytes,2,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *MutateProjectRequest) Reset() {
	*x = MutateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateProjectRequest) ProtoMessage() {}

func (x *MutateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateProjectRequest.ProtoReflect.Descriptor instead.
func (*MutateProjectRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{43}
}

func (x *MutateProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MutateProjectRequest) GetUpdates() *Project {
	if x != nil {
		return x.Updates
	}
	return nil
}

type MutateSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId string  `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Updates  *Source `protobuf:"bytes,2,opt,name=updates,proto3" json:"updates,omitempty"`
}

func (x *MutateSourceRequest) Reset() {
	*x = MutateSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateSourceRequest) ProtoMessage() {}

func (x *MutateSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateSourceRequest.ProtoReflect.Descriptor instead.
func (*MutateSourceRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{44}
}

func (x *MutateSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *MutateSourceRequest) GetUpdates() *Source {
	if x != nil {
		return x.Updates
	}
	return nil
}

type RemoveRecentlyViewedProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *RemoveRecentlyViewedProjectRequest) Reset() {
	*x = RemoveRecentlyViewedProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveRecentlyViewedProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveRecentlyViewedProjectRequest) ProtoMessage() {}

func (x *RemoveRecentlyViewedProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveRecentlyViewedProjectRequest.ProtoReflect.Descriptor instead.
func (*RemoveRecentlyViewedProjectRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{45}
}

func (x *RemoveRecentlyViewedProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type CheckSourceFreshnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *CheckSourceFreshnessRequest) Reset() {
	*x = CheckSourceFreshnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceFreshnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceFreshnessRequest) ProtoMessage() {}

func (x *CheckSourceFreshnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceFreshnessRequest.ProtoReflect.Descriptor instead.
func (*CheckSourceFreshnessRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{46}
}

func (x *CheckSourceFreshnessRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type CheckSourceFreshnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFresh     bool                   `protobuf:"varint,1,opt,name=is_fresh,json=isFresh,proto3" json:"is_fresh,omitempty"`
	LastChecked *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_checked,json=lastChecked,proto3" json:"last_checked,omitempty"`
}

func (x *CheckSourceFreshnessResponse) Reset() {
	*x = CheckSourceFreshnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSourceFreshnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSourceFreshnessResponse) ProtoMessage() {}

func (x *CheckSourceFreshnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSourceFreshnessResponse.ProtoReflect.Descriptor instead.
func (*CheckSourceFreshnessResponse) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{47}
}

func (x *CheckSourceFreshnessResponse) GetIsFresh() bool {
	if x != nil {
		return x.IsFresh
	}
	return false
}

func (x *CheckSourceFreshnessResponse) GetLastChecked() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChecked
	}
	return nil
}

type LoadSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *LoadSourceRequest) Reset() {
	*x = LoadSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSourceRequest) ProtoMessage() {}

func (x *LoadSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSourceRequest.ProtoReflect.Descriptor instead.
func (*LoadSourceRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{48}
}

func (x *LoadSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type RefreshSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *RefreshSourceRequest) Reset() {
	*x = RefreshSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshSourceRequest) ProtoMessage() {}

func (x *RefreshSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshSourceRequest.ProtoReflect.Descriptor instead.
func (*RefreshSourceRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{49}
}

func (x *RefreshSourceRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type GenerateDocumentGuidesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GenerateDocumentGuidesRequest) Reset() {
	*x = GenerateDocumentGuidesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateDocumentGuidesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateDocumentGuidesRequest) ProtoMessage() {}

func (x *GenerateDocumentGuidesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateDocumentGuidesRequest.ProtoReflect.Descriptor instead.
func (*GenerateDocumentGuidesRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{50}
}

func (x *GenerateDocumentGuidesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GenerateNotebookGuideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GenerateNotebookGuideRequest) Reset() {
	*x = GenerateNotebookGuideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateNotebookGuideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateNotebookGuideRequest) ProtoMessage() {}

func (x *GenerateNotebookGuideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateNotebookGuideRequest.ProtoReflect.Descriptor instead.
func (*GenerateNotebookGuideRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{51}
}

func (x *GenerateNotebookGuideRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GenerateOutlineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GenerateOutlineRequest) Reset() {
	*x = GenerateOutlineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateOutlineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateOutlineRequest) ProtoMessage() {}

func (x *GenerateOutlineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateOutlineRequest.ProtoReflect.Descriptor instead.
func (*GenerateOutlineRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{52}
}

func (x *GenerateOutlineRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type GenerateSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GenerateSectionRequest) Reset() {
	*x = GenerateSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateSectionRequest) ProtoMessage() {}

func (x *GenerateSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateSectionRequest.ProtoReflect.Descriptor instead.
func (*GenerateSectionRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{53}
}

func (x *GenerateSectionRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type StartDraftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *StartDraftRequest) Reset() {
	*x = StartDraftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDraftRequest) ProtoMessage() {}

func (x *StartDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDraftRequest.ProtoReflect.Descriptor instead.
func (*StartDraftRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{54}
}

func (x *StartDraftRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type StartSectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *StartSectionRequest) Reset() {
	*x = StartSectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartSectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartSectionRequest) ProtoMessage() {}

func (x *StartSectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartSectionRequest.ProtoReflect.Descriptor instead.
func (*StartSectionRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{55}
}

func (x *StartSectionRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type SubmitFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	FeedbackType string `protobuf:"bytes,2,opt,name=feedback_type,json=feedbackType,proto3" json:"feedback_type,omitempty"`
	FeedbackText string `protobuf:"bytes,3,opt,name=feedback_text,json=feedbackText,proto3" json:"feedback_text,omitempty"`
}

func (x *SubmitFeedbackRequest) Reset() {
	*x = SubmitFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitFeedbackRequest) ProtoMessage() {}

func (x *SubmitFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_notebooklm_v1alpha1_orchestration_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SubmitFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP(), []int{56}
}

func (x *SubmitFeedbackRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *SubmitFeedbackRequest) GetFeedbackType() string {
	if x != nil {
		return x.FeedbackType
	}
	return ""
}

func (x *SubmitFeedbackRequest) GetFeedbackText() string {
	if x != nil {
		return x.FeedbackText
	}
	return ""
}

var File_notebooklm_v1alpha1_orchestration_proto protoreflect.FileDescriptor

var file_notebooklm_v1alpha1_orchestration_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x47,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0xe8, 0x03, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x44, 0x0a, 0x0f, 0x74, 0x61, 0x69, 0x6c, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x74, 0x61, 0x69, 0x6c, 0x6f, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x22, 0x96, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x65,
	0x78, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x0c, 0x54,
	0x65, 0x78, 0x74, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x72, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x52, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x7e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b,
	0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x16, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x17, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x1f,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x53, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x20, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x67, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x59, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6d, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x9b, 0x02, 0x0a, 0x0b, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x79, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x50, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x80, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x76, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x22, 0x42, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x6f,
	0x6a, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x22,
	0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6d, 0x0a, 0x14, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x69, 0x0a, 0x13, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x22, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x1c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x65, 0x73, 0x68,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x46, 0x72, 0x65, 0x73, 0x68, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a,
	0x1c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x65, 0x78, 0x74, 0x2a, 0x98, 0x01, 0x0a, 0x0c,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x56,
	0x49, 0x45, 0x57, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x2a, 0x81, 0x01, 0x0a, 0x0d, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x52, 0x54, 0x49,
	0x46, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xf9, 0x2c, 0x0a, 0x20, 0x4c,
	0x61, 0x62, 0x73, 0x54, 0x61, 0x69, 0x6c, 0x77, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x63, 0x68, 0x65,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x90, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x33, 0xc2,
	0xf3, 0x18, 0x06, 0x78, 0x70, 0x57, 0x47, 0x4c, 0x66, 0xca, 0xf3, 0x18, 0x25, 0x5b, 0x25, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x25, 0x2c, 0x20, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x25, 0x5d, 0x12, 0x74, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x12, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x1d, 0xc2, 0xf3, 0x18, 0x06, 0x42,
	0x6e, 0x4c, 0x79, 0x75, 0x66, 0xca, 0xf3, 0x18, 0x0f, 0x5b, 0x25, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x29, 0xc2, 0xf3, 0x18, 0x06, 0x44, 0x4a, 0x65, 0x7a,
	0x42, 0x63, 0xca, 0xf3, 0x18, 0x1b, 0x5b, 0x25, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x25, 0x2c, 0x20, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x25,
	0x5d, 0x12, 0x73, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0xc2, 0xf3, 0x18, 0x06, 0x57, 0x78, 0x42,
	0x5a, 0x74, 0x62, 0xca, 0xf3, 0x18, 0x0f, 0x5b, 0x25, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x9f, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0xc2, 0xf3, 0x18, 0x06, 0x4c, 0x66, 0x54, 0x58, 0x6f, 0x65, 0xca, 0xf3, 0x18, 0x29, 0x5b,
	0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x25, 0x2c, 0x20, 0x25, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x25, 0x5d, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x4f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x4f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x34, 0xc2, 0xf3, 0x18,
	0x06, 0x79, 0x79, 0x72, 0x79, 0x4a, 0x65, 0xca, 0xf3, 0x18, 0x26, 0x5b, 0x25, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x25, 0x2c, 0x20, 0x25, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x25,
	0x5d, 0x12, 0x7a, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x27, 0xc2, 0xf3, 0x18, 0x06, 0x69, 0x7a, 0x41, 0x6f, 0x44, 0x64,
	0xca, 0xf3, 0x18, 0x19, 0x5b, 0x25, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x25, 0x2c, 0x20,
	0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x98, 0x01,
	0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x65,
	0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x72, 0x65, 0x73, 0x68, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0xc2, 0xf3, 0x18,
	0x06, 0x79, 0x52, 0x39, 0x59, 0x6f, 0x66, 0xca, 0xf3, 0x18, 0x0d, 0x5b, 0x25, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x71, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1d, 0xc2, 0xf3,
	0x18, 0x05, 0x74, 0x47, 0x4d, 0x42, 0x4a, 0xca, 0xf3, 0x18, 0x10, 0x5b, 0x5b, 0x25, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x25, 0x5d, 0x5d, 0x12, 0x93, 0x01, 0x0a, 0x0f,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0xc2, 0xf3, 0x18, 0x06,
	0x71, 0x58, 0x79, 0x61, 0x4e, 0x65, 0xca, 0xf3, 0x18, 0x17, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x71, 0x75, 0x65, 0x72, 0x79, 0x25,
	0x5d, 0x12, 0x6e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x26, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x1b, 0xc2, 0xf3, 0x18, 0x06, 0x68, 0x69, 0x7a, 0x6f, 0x4a, 0x63,
	0xca, 0xf3, 0x18, 0x0d, 0x5b, 0x25, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x25,
	0x5d, 0x12, 0x7d, 0x0a, 0x0c, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x28, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x26, 0xc2, 0xf3, 0x18, 0x06, 0x62, 0x37,
	0x57, 0x66, 0x6a, 0x65, 0xca, 0xf3, 0x18, 0x18, 0x5b, 0x25, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x25, 0x5d,
	0x12, 0x74, 0x0a, 0x0d, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x1b, 0xc2, 0xf3, 0x18, 0x06, 0x46,
	0x4c, 0x6d, 0x4a, 0x71, 0x65, 0xca, 0xf3, 0x18, 0x0d, 0x5b, 0x25, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x2c, 0xc2, 0xf3, 0x18, 0x06, 0x41, 0x48, 0x79, 0x48, 0x72, 0x64, 0xca,
	0xf3, 0x18, 0x1e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25,
	0x2c, 0x20, 0x25, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x25,
	0x5d, 0x12, 0x82, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x56, 0x55,
	0x73, 0x69, 0x79, 0x62, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x7c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2f, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x73, 0x4a, 0x44, 0x62,
	0x69, 0x63, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x25, 0x5d, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x30, 0xc2, 0xf3, 0x18, 0x06, 0x43, 0x59,
	0x4b, 0x30, 0x58, 0x62, 0xca, 0xf3, 0x18, 0x22, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x25, 0x2c, 0x20,
	0x25, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x25, 0x5d, 0x12, 0x6a, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0xc2, 0xf3, 0x18, 0x06,
	0x41, 0x48, 0x30, 0x6d, 0x77, 0x64, 0xca, 0xf3, 0x18, 0x0c, 0x5b, 0x25, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x25, 0x5d, 0x12, 0x74, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0xc2, 0xf3, 0x18, 0x05, 0x63, 0x46, 0x6a, 0x69, 0x39, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x80, 0x01, 0x0a,
	0x0a, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x2d, 0xc2, 0xf3, 0x18, 0x06, 0x63, 0x59, 0x41, 0x66, 0x54, 0x62, 0xca, 0xf3, 0x18, 0x1f,
	0x5b, 0x25, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x25, 0x2c, 0x20, 0x25, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x25, 0x5d, 0x12,
	0x7a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x20, 0xc2, 0xf3, 0x18, 0x06, 0x43,
	0x43, 0x71, 0x46, 0x76, 0x66, 0xca, 0xf3, 0x18, 0x12, 0x5b, 0x25, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x25, 0x2c, 0x20, 0x25, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x25, 0x5d, 0x12, 0x73, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2a, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1d, 0xc2, 0xf3, 0x18, 0x06, 0x57, 0x57, 0x49, 0x4e, 0x71, 0x62, 0xca, 0xf3, 0x18,
	0x0f, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x25, 0x5d,
	0x12, 0x70, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x72, 0x4c, 0x4d, 0x31, 0x4e, 0x65,
	0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x25, 0x5d, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x30, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x29, 0xc2, 0xf3, 0x18, 0x06, 0x6e, 0x53, 0x39, 0x51, 0x6c, 0x63, 0xca, 0xf3, 0x18, 0x1b,
	0x5b, 0x25, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x25, 0x2c, 0x20, 0x25, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x25, 0x5d, 0x12, 0xb5, 0x01, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xc2, 0xf3, 0x18,
	0x06, 0x77, 0x58, 0x62, 0x68, 0x73, 0x66, 0xca, 0xf3, 0x18, 0x14, 0x5b, 0x6e, 0x75, 0x6c, 0x6c,
	0x2c, 0x20, 0x31, 0x2c, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x5b, 0x32, 0x5d, 0x5d, 0xd0,
	0xf3, 0x18, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x27,
	0xc2, 0xf3, 0x18, 0x06, 0x73, 0x30, 0x74, 0x63, 0x32, 0x64, 0xca, 0xf3, 0x18, 0x19, 0x5b, 0x25,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x25, 0x5d, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x56, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x66, 0x65,
	0x6a, 0x6c, 0x37, 0x65, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x73, 0x12, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06,
	0x74, 0x72, 0x30, 0x33, 0x32, 0x65, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0xc9, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x65, 0x64, 0x12, 0x34, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xbd, 0x01, 0xc2, 0xf3, 0x18, 0x02, 0x42, 0x44, 0xca, 0xf3, 0x18, 0x18, 0x5b,
	0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x25, 0x5d, 0xe2, 0xf3, 0x18, 0x69, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x6c, 0x61, 0x62, 0x73,
	0x2e, 0x74, 0x61, 0x69, 0x6c, 0x77, 0x69, 0x6e, 0x64, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x65, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x73, 0x54,
	0x61, 0x69, 0x6c, 0x77, 0x69, 0x6e, 0x64, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x65, 0x64, 0xe8, 0xf3, 0x18, 0x01, 0xf2, 0xf3, 0x18, 0x26, 0x5b, 0x5b, 0x25, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x25, 0x5d, 0x2c, 0x20, 0x25, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x25, 0x2c, 0x20, 0x6e, 0x75, 0x6c, 0x6c, 0x2c, 0x20, 0x5b, 0x32,
	0x5d, 0x5d, 0x30, 0x01, 0x12, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x31,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x32, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x47, 0x75, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x56, 0x66, 0x41, 0x5a, 0x6a,
	0x64, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x25, 0x5d, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2b, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0xc2, 0xf3, 0x18, 0x05, 0x6c, 0x43, 0x6a, 0x41, 0x64, 0xca, 0xf3, 0x18,
	0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12,
	0xa8, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3,
	0x18, 0x06, 0x47, 0x48, 0x73, 0x4b, 0x6f, 0x62, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x42,
	0x65, 0x54, 0x72, 0x59, 0x64, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x7b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x26, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x65, 0x78, 0x58, 0x76,
	0x47, 0x66, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x25, 0x5d, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06,
	0x70, 0x47, 0x43, 0x37, 0x67, 0x66, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2d,
	0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67,
	0x69, 0x63, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0xc2,
	0xf3, 0x18, 0x06, 0x75, 0x4b, 0x38, 0x66, 0x37, 0x63, 0xca, 0xf3, 0x18, 0x1c, 0x5b, 0x25, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x25, 0x5d, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x2f, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x22, 0x1c, 0xc2, 0xf3, 0x18, 0x06, 0x41,
	0x55, 0x72, 0x7a, 0x4d, 0x62, 0xca, 0xf3, 0x18, 0x0e, 0x5b, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x5d, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x2e, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e,
	0xc2, 0xf3, 0x18, 0x06, 0x75, 0x4e, 0x79, 0x4a, 0x4b, 0x65, 0xca, 0xf3, 0x18, 0x30, 0x5b, 0x25,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x25, 0x2c, 0x20, 0x25, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x25, 0x2c, 0x20, 0x25, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x25, 0x5d, 0x12, 0x74,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c,
	0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x10, 0xc2, 0xf3, 0x18, 0x06, 0x5a, 0x77, 0x56, 0x63, 0x4f, 0x63, 0xca, 0xf3,
	0x18, 0x02, 0x5b, 0x5d, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x28, 0xc2, 0xf3, 0x18, 0x06, 0x68, 0x54, 0x35, 0x34, 0x76, 0x63, 0xca, 0xf3, 0x18, 0x1a, 0x5b,
	0x25, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x25, 0x2c, 0x20, 0x25, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x25, 0x5d, 0x1a, 0x2b, 0xe2, 0xf4, 0x18, 0x0e, 0x4c,
	0x61, 0x62, 0x73, 0x54, 0x61, 0x69, 0x6c, 0x77, 0x69, 0x6e, 0x64, 0x55, 0x69, 0xea, 0xf4, 0x18,
	0x15, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xd9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x42, 0x12, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6d, 0x63, 0x2f, 0x6e, 0x6c, 0x6d, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x3b, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x13,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0xca, 0x02, 0x13, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x1f, 0x4e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x6c, 0x6d, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notebooklm_v1alpha1_orchestration_proto_rawDescOnce sync.Once
	file_notebooklm_v1alpha1_orchestration_proto_rawDescData = file_notebooklm_v1alpha1_orchestration_proto_rawDesc
)

func file_notebooklm_v1alpha1_orchestration_proto_rawDescGZIP() []byte {
	file_notebooklm_v1alpha1_orchestration_proto_rawDescOnce.Do(func() {
		file_notebooklm_v1alpha1_orchestration_proto_rawDescData = protoimpl.X.CompressGZIP(file_notebooklm_v1alpha1_orchestration_proto_rawDescData)
	})
	return file_notebooklm_v1alpha1_orchestration_proto_rawDescData
}

var file_notebooklm_v1alpha1_orchestration_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_notebooklm_v1alpha1_orchestration_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_notebooklm_v1alpha1_orchestration_proto_goTypes = []interface{}{
	(ArtifactType)(0),                          // 0: notebooklm.v1alpha1.ArtifactType
	(ArtifactState)(0),                         // 1: notebooklm.v1alpha1.ArtifactState
	(*Context)(nil),                            // 2: notebooklm.v1alpha1.Context
	(*Artifact)(nil),                           // 3: notebooklm.v1alpha1.Artifact
	(*ArtifactSource)(nil),                     // 4: notebooklm.v1alpha1.ArtifactSource
	(*TextFragment)(nil),                       // 5: notebooklm.v1alpha1.TextFragment
	(*Report)(nil),                             // 6: notebooklm.v1alpha1.Report
	(*Section)(nil),                            // 7: notebooklm.v1alpha1.Section
	(*App)(nil),                                // 8: notebooklm.v1alpha1.App
	(*CreateArtifactRequest)(nil),              // 9: notebooklm.v1alpha1.CreateArtifactRequest
	(*GetArtifactRequest)(nil),                 // 10: notebooklm.v1alpha1.GetArtifactRequest
	(*UpdateArtifactRequest)(nil),              // 11: notebooklm.v1alpha1.UpdateArtifactRequest
	(*DeleteArtifactRequest)(nil),              // 12: notebooklm.v1alpha1.DeleteArtifactRequest
	(*ListArtifactsRequest)(nil),               // 13: notebooklm.v1alpha1.ListArtifactsRequest
	(*ListArtifactsResponse)(nil),              // 14: notebooklm.v1alpha1.ListArtifactsResponse
	(*ActOnSourcesRequest)(nil),                // 15: notebooklm.v1alpha1.ActOnSourcesRequest
	(*CreateAudioOverviewRequest)(nil),         // 16: notebooklm.v1alpha1.CreateAudioOverviewRequest
	(*GetAudioOverviewRequest)(nil),            // 17: notebooklm.v1alpha1.GetAudioOverviewRequest
	(*DeleteAudioOverviewRequest)(nil),         // 18: notebooklm.v1alpha1.DeleteAudioOverviewRequest
	(*DiscoverSourcesRequest)(nil),             // 19: notebooklm.v1alpha1.DiscoverSourcesRequest
	(*DiscoverSourcesResponse)(nil),            // 20: notebooklm.v1alpha1.DiscoverSourcesResponse
	(*GenerateFreeFormStreamedRequest)(nil),    // 21: notebooklm.v1alpha1.GenerateFreeFormStreamedRequest
	(*GenerateFreeFormStreamedResponse)(nil),   // 22: notebooklm.v1alpha1.GenerateFreeFormStreamedResponse
	(*GenerateReportSuggestionsRequest)(nil),   // 23: notebooklm.v1alpha1.GenerateReportSuggestionsRequest
	(*GenerateReportSuggestionsResponse)(nil),  // 24: notebooklm.v1alpha1.GenerateReportSuggestionsResponse
	(*GetProjectAnalyticsRequest)(nil),         // 25: notebooklm.v1alpha1.GetProjectAnalyticsRequest
	(*ProjectAnalytics)(nil),                   // 26: notebooklm.v1alpha1.ProjectAnalytics
	(*ListFeaturedProjectsRequest)(nil),        // 27: notebooklm.v1alpha1.ListFeaturedProjectsRequest
	(*ListFeaturedProjectsResponse)(nil),       // 28: notebooklm.v1alpha1.ListFeaturedProjectsResponse
	(*AddSourceRequest)(nil),                   // 29: notebooklm.v1alpha1.AddSourceRequest
	(*SourceInput)(nil),                        // 30: notebooklm.v1alpha1.SourceInput
	(*CreateNoteRequest)(nil),                  // 31: notebooklm.v1alpha1.CreateNoteRequest
	(*DeleteNotesRequest)(nil),                 // 32: notebooklm.v1alpha1.DeleteNotesRequest
	(*GetNotesRequest)(nil),                    // 33: notebooklm.v1alpha1.GetNotesRequest
	(*MutateNoteRequest)(nil),                  // 34: notebooklm.v1alpha1.MutateNoteRequest
	(*NoteUpdate)(nil),                         // 35: notebooklm.v1alpha1.NoteUpdate
	(*GetOrCreateAccountRequest)(nil),          // 36: notebooklm.v1alpha1.GetOrCreateAccountRequest
	(*MutateAccountRequest)(nil),               // 37: notebooklm.v1alpha1.MutateAccountRequest
	(*Account)(nil),                            // 38: notebooklm.v1alpha1.Account
	(*AccountSettings)(nil),                    // 39: notebooklm.v1alpha1.AccountSettings
	(*CreateProjectRequest)(nil),               // 40: notebooklm.v1alpha1.CreateProjectRequest
	(*DeleteProjectsRequest)(nil),              // 41: notebooklm.v1alpha1.DeleteProjectsRequest
	(*DeleteSourcesRequest)(nil),               // 42: notebooklm.v1alpha1.DeleteSourcesRequest
	(*GetProjectRequest)(nil),                  // 43: notebooklm.v1alpha1.GetProjectRequest
	(*ListRecentlyViewedProjectsRequest)(nil),  // 44: notebooklm.v1alpha1.ListRecentlyViewedProjectsRequest
	(*MutateProjectRequest)(nil),               // 45: notebooklm.v1alpha1.MutateProjectRequest
	(*MutateSourceRequest)(nil),                // 46: notebooklm.v1alpha1.MutateSourceRequest
	(*RemoveRecentlyViewedProjectRequest)(nil), // 47: notebooklm.v1alpha1.RemoveRecentlyViewedProjectRequest
	(*CheckSourceFreshnessRequest)(nil),        // 48: notebooklm.v1alpha1.CheckSourceFreshnessRequest
	(*CheckSourceFreshnessResponse)(nil),       // 49: notebooklm.v1alpha1.CheckSourceFreshnessResponse
	(*LoadSourceRequest)(nil),                  // 50: notebooklm.v1alpha1.LoadSourceRequest
	(*RefreshSourceRequest)(nil),               // 51: notebooklm.v1alpha1.RefreshSourceRequest
	(*GenerateDocumentGuidesRequest)(nil),      // 52: notebooklm.v1alpha1.GenerateDocumentGuidesRequest
	(*GenerateNotebookGuideRequest)(nil),       // 53: notebooklm.v1alpha1.GenerateNotebookGuideRequest
	(*GenerateOutlineRequest)(nil),             // 54: notebooklm.v1alpha1.GenerateOutlineRequest
	(*GenerateSectionRequest)(nil),             // 55: notebooklm.v1alpha1.GenerateSectionRequest
	(*StartDraftRequest)(nil),                  // 56: notebooklm.v1alpha1.StartDraftRequest
	(*StartSectionRequest)(nil),                // 57: notebooklm.v1alpha1.StartSectionRequest
	(*SubmitFeedbackRequest)(nil),              // 58: notebooklm.v1alpha1.SubmitFeedbackRequest
	(*Source)(nil),                             // 59: notebooklm.v1alpha1.Source
	(*AudioOverview)(nil),                      // 60: notebooklm.v1alpha1.AudioOverview
	(*SourceId)(nil),                           // 61: notebooklm.v1alpha1.SourceId
	(*fieldmaskpb.FieldMask)(nil),              // 62: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),              // 63: google.protobuf.Timestamp
	(*Project)(nil),                            // 64: notebooklm.v1alpha1.Project
	(SourceType)(0),                            // 65: notebooklm.v1alpha1.SourceType
	(*wrapperspb.Int32Value)(nil),              // 66: google.protobuf.Int32Value
	(*GenerateMagicViewRequest)(nil),           // 67: notebooklm.v1alpha1.GenerateMagicViewRequest
	(*emptypb.Empty)(nil),                      // 68: google.protobuf.Empty
	(*GetNotesResponse)(nil),                   // 69: notebooklm.v1alpha1.GetNotesResponse
	(*ListRecentlyViewedProjectsResponse)(nil), // 70: notebooklm.v1alpha1.ListRecentlyViewedProjectsResponse
	(*GenerateDocumentGuidesResponse)(nil),     // 71: notebooklm.v1alpha1.GenerateDocumentGuidesResponse
	(*GenerateNotebookGuideResponse)(nil),      // 72: notebooklm.v1alpha1.GenerateNotebookGuideResponse
	(*GenerateOutlineResponse)(nil),            // 73: notebooklm.v1alpha1.GenerateOutlineResponse
	(*GenerateSectionResponse)(nil),            // 74: notebooklm.v1alpha1.GenerateSectionResponse
	(*StartDraftResponse)(nil),                 // 75: notebooklm.v1alpha1.StartDraftResponse
	(*StartSectionResponse)(nil),               // 76: notebooklm.v1alpha1.StartSectionResponse
	(*GenerateMagicViewResponse)(nil),          // 77: notebooklm.v1alpha1.GenerateMagicViewResponse
}
var file_notebooklm_v1alpha1_orchestration_proto_depIdxs = []int32{
	0,  // 0: notebooklm.v1alpha1.Artifact.type:type_name -> notebooklm.v1alpha1.ArtifactType
	4,  // 1: notebooklm.v1alpha1.Artifact.sources:type_name -> notebooklm.v1alpha1.ArtifactSource
	1,  // 2: notebooklm.v1alpha1.Artifact.state:type_name -> notebooklm.v1alpha1.ArtifactState
	59, // 3: notebooklm.v1alpha1.Artifact.note:type_name -> notebooklm.v1alpha1.Source
	60, // 4: notebooklm.v1alpha1.Artifact.audio_overview:type_name -> notebooklm.v1alpha1.AudioOverview
	6,  // 5: notebooklm.v1alpha1.Artifact.tailored_report:type_name -> notebooklm.v1alpha1.Report
	8,  // 6: notebooklm.v1alpha1.Artifact.app:type_name -> notebooklm.v1alpha1.App
	61, // 7: notebooklm.v1alpha1.ArtifactSource.source_id:type_name -> notebooklm.v1alpha1.SourceId
	5,  // 8: notebooklm.v1alpha1.ArtifactSource.text_fragments:type_name -> notebooklm.v1alpha1.TextFragment
	7,  // 9: notebooklm.v1alpha1.Report.sections:type_name -> notebooklm.v1alpha1.Section
	2,  // 10: notebooklm.v1alpha1.CreateArtifactRequest.context:type_name -> notebooklm.v1alpha1.Context
	3,  // 11: notebooklm.v1alpha1.CreateArtifactRequest.artifact:type_name -> notebooklm.v1alpha1.Artifact
	3,  // 12: notebooklm.v1alpha1.UpdateArtifactRequest.artifact:type_name -> notebooklm.v1alpha1.Artifact
	62, // 13: notebooklm.v1alpha1.UpdateArtifactRequest.update_mask:type_name -> google.protobuf.FieldMask
	3,  // 14: notebooklm.v1alpha1.ListArtifactsResponse.artifacts:type_name -> notebooklm.v1alpha1.Artifact
	59, // 15: notebooklm.v1alpha1.DiscoverSourcesResponse.sources:type_name -> notebooklm.v1alpha1.Source
	63, // 16: notebooklm.v1alpha1.ProjectAnalytics.last_accessed:type_name -> google.protobuf.Timestamp
	64, // 17: notebooklm.v1alpha1.ListFeaturedProjectsResponse.projects:type_name -> notebooklm.v1alpha1.Project
	30, // 18: notebooklm.v1alpha1.AddSourceRequest.sources:type_name -> notebooklm.v1alpha1.SourceInput
	65, // 19: notebooklm.v1alpha1.SourceInput.source_type:type_name -> notebooklm.v1alpha1.SourceType
	35, // 20: notebooklm.v1alpha1.MutateNoteRequest.updates:type_name -> notebooklm.v1alpha1.NoteUpdate
	38, // 21: notebooklm.v1alpha1.MutateAccountRequest.account:type_name -> notebooklm.v1alpha1.Account
	62, // 22: notebooklm.v1alpha1.MutateAccountRequest.update_mask:type_name -> google.protobuf.FieldMask
	39, // 23: notebooklm.v1alpha1.Account.settings:type_name -> notebooklm.v1alpha1.AccountSettings
	66, // 24: notebooklm.v1alpha1.ListRecentlyViewedProjectsRequest.limit:type_name -> google.protobuf.Int32Value
	66, // 25: notebooklm.v1alpha1.ListRecentlyViewedProjectsRequest.offset:type_name -> google.protobuf.Int32Value
	66, // 26: notebooklm.v1alpha1.ListRecentlyViewedProjectsRequest.filter:type_name -> google.protobuf.Int32Value
	64, // 27: notebooklm.v1alpha1.MutateProjectRequest.updates:type_name -> notebooklm.v1alpha1.Project
	59, // 28: notebooklm.v1alpha1.MutateSourceRequest.updates:type_name -> notebooklm.v1alpha1.Source
	63, // 29: notebooklm.v1alpha1.CheckSourceFreshnessResponse.last_checked:type_name -> google.protobuf.Timestamp
	9,  // 30: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateArtifact:input_type -> notebooklm.v1alpha1.CreateArtifactRequest
	10, // 31: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetArtifact:input_type -> notebooklm.v1alpha1.GetArtifactRequest
	11, // 32: notebooklm.v1alpha1.LabsTailwindOrchestrationService.UpdateArtifact:input_type -> notebooklm.v1alpha1.UpdateArtifactRequest
	12, // 33: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteArtifact:input_type -> notebooklm.v1alpha1.DeleteArtifactRequest
	13, // 34: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListArtifacts:input_type -> notebooklm.v1alpha1.ListArtifactsRequest
	15, // 35: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ActOnSources:input_type -> notebooklm.v1alpha1.ActOnSourcesRequest
	29, // 36: notebooklm.v1alpha1.LabsTailwindOrchestrationService.AddSources:input_type -> notebooklm.v1alpha1.AddSourceRequest
	48, // 37: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CheckSourceFreshness:input_type -> notebooklm.v1alpha1.CheckSourceFreshnessRequest
	42, // 38: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteSources:input_type -> notebooklm.v1alpha1.DeleteSourcesRequest
	19, // 39: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DiscoverSources:input_type -> notebooklm.v1alpha1.DiscoverSourcesRequest
	50, // 40: notebooklm.v1alpha1.LabsTailwindOrchestrationService.LoadSource:input_type -> notebooklm.v1alpha1.LoadSourceRequest
	46, // 41: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateSource:input_type -> notebooklm.v1alpha1.MutateSourceRequest
	51, // 42: notebooklm.v1alpha1.LabsTailwindOrchestrationService.RefreshSource:input_type -> notebooklm.v1alpha1.RefreshSourceRequest
	16, // 43: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateAudioOverview:input_type -> notebooklm.v1alpha1.CreateAudioOverviewRequest
	17, // 44: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetAudioOverview:input_type -> notebooklm.v1alpha1.GetAudioOverviewRequest
	18, // 45: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteAudioOverview:input_type -> notebooklm.v1alpha1.DeleteAudioOverviewRequest
	31, // 46: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateNote:input_type -> notebooklm.v1alpha1.CreateNoteRequest
	32, // 47: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteNotes:input_type -> notebooklm.v1alpha1.DeleteNotesRequest
	33, // 48: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetNotes:input_type -> notebooklm.v1alpha1.GetNotesRequest
	34, // 49: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateNote:input_type -> notebooklm.v1alpha1.MutateNoteRequest
	40, // 50: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateProject:input_type -> notebooklm.v1alpha1.CreateProjectRequest
	41, // 51: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteProjects:input_type -> notebooklm.v1alpha1.DeleteProjectsRequest
	43, // 52: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetProject:input_type -> notebooklm.v1alpha1.GetProjectRequest
	27, // 53: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListFeaturedProjects:input_type -> notebooklm.v1alpha1.ListFeaturedProjectsRequest
	44, // 54: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListRecentlyViewedProjects:input_type -> notebooklm.v1alpha1.ListRecentlyViewedProjectsRequest
	45, // 55: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateProject:input_type -> notebooklm.v1alpha1.MutateProjectRequest
	47, // 56: notebooklm.v1alpha1.LabsTailwindOrchestrationService.RemoveRecentlyViewedProject:input_type -> notebooklm.v1alpha1.RemoveRecentlyViewedProjectRequest
	52, // 57: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateDocumentGuides:input_type -> notebooklm.v1alpha1.GenerateDocumentGuidesRequest
	21, // 58: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateFreeFormStreamed:input_type -> notebooklm.v1alpha1.GenerateFreeFormStreamedRequest
	53, // 59: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateNotebookGuide:input_type -> notebooklm.v1alpha1.GenerateNotebookGuideRequest
	54, // 60: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateOutline:input_type -> notebooklm.v1alpha1.GenerateOutlineRequest
	23, // 61: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateReportSuggestions:input_type -> notebooklm.v1alpha1.GenerateReportSuggestionsRequest
	55, // 62: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateSection:input_type -> notebooklm.v1alpha1.GenerateSectionRequest
	56, // 63: notebooklm.v1alpha1.LabsTailwindOrchestrationService.StartDraft:input_type -> notebooklm.v1alpha1.StartDraftRequest
	57, // 64: notebooklm.v1alpha1.LabsTailwindOrchestrationService.StartSection:input_type -> notebooklm.v1alpha1.StartSectionRequest
	67, // 65: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateMagicView:input_type -> notebooklm.v1alpha1.GenerateMagicViewRequest
	25, // 66: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetProjectAnalytics:input_type -> notebooklm.v1alpha1.GetProjectAnalyticsRequest
	58, // 67: notebooklm.v1alpha1.LabsTailwindOrchestrationService.SubmitFeedback:input_type -> notebooklm.v1alpha1.SubmitFeedbackRequest
	36, // 68: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetOrCreateAccount:input_type -> notebooklm.v1alpha1.GetOrCreateAccountRequest
	37, // 69: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateAccount:input_type -> notebooklm.v1alpha1.MutateAccountRequest
	3,  // 70: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateArtifact:output_type -> notebooklm.v1alpha1.Artifact
	3,  // 71: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetArtifact:output_type -> notebooklm.v1alpha1.Artifact
	3,  // 72: notebooklm.v1alpha1.LabsTailwindOrchestrationService.UpdateArtifact:output_type -> notebooklm.v1alpha1.Artifact
	68, // 73: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteArtifact:output_type -> google.protobuf.Empty
	14, // 74: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListArtifacts:output_type -> notebooklm.v1alpha1.ListArtifactsResponse
	68, // 75: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ActOnSources:output_type -> google.protobuf.Empty
	64, // 76: notebooklm.v1alpha1.LabsTailwindOrchestrationService.AddSources:output_type -> notebooklm.v1alpha1.Project
	49, // 77: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CheckSourceFreshness:output_type -> notebooklm.v1alpha1.CheckSourceFreshnessResponse
	68, // 78: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteSources:output_type -> google.protobuf.Empty
	20, // 79: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DiscoverSources:output_type -> notebooklm.v1alpha1.DiscoverSourcesResponse
	59, // 80: notebooklm.v1alpha1.LabsTailwindOrchestrationService.LoadSource:output_type -> notebooklm.v1alpha1.Source
	59, // 81: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateSource:output_type -> notebooklm.v1alpha1.Source
	59, // 82: notebooklm.v1alpha1.LabsTailwindOrchestrationService.RefreshSource:output_type -> notebooklm.v1alpha1.Source
	60, // 83: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateAudioOverview:output_type -> notebooklm.v1alpha1.AudioOverview
	60, // 84: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetAudioOverview:output_type -> notebooklm.v1alpha1.AudioOverview
	68, // 85: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteAudioOverview:output_type -> google.protobuf.Empty
	59, // 86: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateNote:output_type -> notebooklm.v1alpha1.Source
	68, // 87: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteNotes:output_type -> google.protobuf.Empty
	69, // 88: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetNotes:output_type -> notebooklm.v1alpha1.GetNotesResponse
	59, // 89: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateNote:output_type -> notebooklm.v1alpha1.Source
	64, // 90: notebooklm.v1alpha1.LabsTailwindOrchestrationService.CreateProject:output_type -> notebooklm.v1alpha1.Project
	68, // 91: notebooklm.v1alpha1.LabsTailwindOrchestrationService.DeleteProjects:output_type -> google.protobuf.Empty
	64, // 92: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetProject:output_type -> notebooklm.v1alpha1.Project
	28, // 93: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListFeaturedProjects:output_type -> notebooklm.v1alpha1.ListFeaturedProjectsResponse
	70, // 94: notebooklm.v1alpha1.LabsTailwindOrchestrationService.ListRecentlyViewedProjects:output_type -> notebooklm.v1alpha1.ListRecentlyViewedProjectsResponse
	64, // 95: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateProject:output_type -> notebooklm.v1alpha1.Project
	68, // 96: notebooklm.v1alpha1.LabsTailwindOrchestrationService.RemoveRecentlyViewedProject:output_type -> google.protobuf.Empty
	71, // 97: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateDocumentGuides:output_type -> notebooklm.v1alpha1.GenerateDocumentGuidesResponse
	22, // 98: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateFreeFormStreamed:output_type -> notebooklm.v1alpha1.GenerateFreeFormStreamedResponse
	72, // 99: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateNotebookGuide:output_type -> notebooklm.v1alpha1.GenerateNotebookGuideResponse
	73, // 100: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateOutline:output_type -> notebooklm.v1alpha1.GenerateOutlineResponse
	24, // 101: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateReportSuggestions:output_type -> notebooklm.v1alpha1.GenerateReportSuggestionsResponse
	74, // 102: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateSection:output_type -> notebooklm.v1alpha1.GenerateSectionResponse
	75, // 103: notebooklm.v1alpha1.LabsTailwindOrchestrationService.StartDraft:output_type -> notebooklm.v1alpha1.StartDraftResponse
	76, // 104: notebooklm.v1alpha1.LabsTailwindOrchestrationService.StartSection:output_type -> notebooklm.v1alpha1.StartSectionResponse
	77, // 105: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GenerateMagicView:output_type -> notebooklm.v1alpha1.GenerateMagicViewResponse
	26, // 106: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetProjectAnalytics:output_type -> notebooklm.v1alpha1.ProjectAnalytics
	68, // 107: notebooklm.v1alpha1.LabsTailwindOrchestrationService.SubmitFeedback:output_type -> google.protobuf.Empty
	38, // 108: notebooklm.v1alpha1.LabsTailwindOrchestrationService.GetOrCreateAccount:output_type -> notebooklm.v1alpha1.Account
	38, // 109: notebooklm.v1alpha1.LabsTailwindOrchestrationService.MutateAccount:output_type -> notebooklm.v1alpha1.Account
	70, // [70:110] is the sub-list for method output_type
	30, // [30:70] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_notebooklm_v1alpha1_orchestration_proto_init() }
func file_notebooklm_v1alpha1_orchestration_proto_init() {
	if File_notebooklm_v1alpha1_orchestration_proto != nil {
		return
	}
	file_notebooklm_v1alpha1_rpc_extensions_proto_init()
	file_notebooklm_v1alpha1_notebooklm_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Section); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteArtifactRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActOnSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAudioOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAudioOverviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoverSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFreeFormStreamedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateFreeFormStreamedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReportSuggestionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateReportSuggestionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturedProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFeaturedProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateNoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRecentlyViewedProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveRecentlyViewedProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceFreshnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSourceFreshnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateDocumentGuidesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateNotebookGuideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateOutlineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDraftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartSectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notebooklm_v1alpha1_orchestration_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notebooklm_v1alpha1_orchestration_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_notebooklm_v1alpha1_orchestration_proto_goTypes,
		DependencyIndexes: file_notebooklm_v1alpha1_orchestration_proto_depIdxs,
		EnumInfos:         file_notebooklm_v1alpha1_orchestration_proto_enumTypes,
		MessageInfos:      file_notebooklm_v1alpha1_orchestration_proto_msgTypes,
	}.Build()
	File_notebooklm_v1alpha1_orchestration_proto = out.File
	file_notebooklm_v1alpha1_orchestration_proto_rawDesc = nil
	file_notebooklm_v1alpha1_orchestration_proto_goTypes = nil
	file_notebooklm_v1alpha1_orchestration_proto_depIdxs = nil
}
