// GENERATION_BEHAVIOR: overwrite
// Code generated by protoc-gen-anything. DO NOT EDIT.
// source: {{.File.Desc.Path}}

package service

{{- $hasMethodWithArgs := false }}
{{- $hasMethodWithRpcId := false }}
{{- $hasEmptyResponse := false }}
{{- $hasNonEmptyResponse := false }}
{{- range .Service.Methods }}
  {{- $rpcID := methodExtension . "notebooklm.v1alpha1.rpc_id" }}
  {{- $argFormat := methodExtension . "notebooklm.v1alpha1.arg_format" }}
  {{- if $rpcID }}
    {{- $hasMethodWithRpcId = true }}
    {{- if $argFormat }}
      {{- $hasMethodWithArgs = true }}
    {{- end }}
    {{- if eq .Output.GoIdent.GoName "Empty" }}
      {{- $hasEmptyResponse = true }}
    {{- else }}
      {{- $hasNonEmptyResponse = true }}
    {{- end }}
  {{- end }}
{{- end }}

import (
	"context"
	"fmt"
	{{- if $hasMethodWithArgs }}
	
	"github.com/tmc/nlm/gen/method"
	{{- end }}
	notebooklmv1alpha1 "github.com/tmc/nlm/gen/notebooklm/v1alpha1"
	"github.com/tmc/nlm/internal/batchexecute"
	{{- if $hasNonEmptyResponse }}
	"github.com/tmc/nlm/internal/beprotojson"
	{{- end }}
	"github.com/tmc/nlm/internal/rpc"
	{{- if $hasEmptyResponse }}
	"google.golang.org/protobuf/types/known/emptypb"
	{{- end }}
)

{{- $service := .Service }}
{{- $serviceOptions := .Service.Desc.Options }}

// {{.Service.GoName}}Client is a generated client for the {{.Service.GoName}} service.
type {{.Service.GoName}}Client struct {
	rpcClient *rpc.Client
}

// New{{.Service.GoName}}Client creates a new client for the {{.Service.GoName}} service.
func New{{.Service.GoName}}Client(authToken, cookies string, opts ...batchexecute.Option) *{{.Service.GoName}}Client {
	return &{{.Service.GoName}}Client{
		rpcClient: rpc.New(authToken, cookies, opts...),
	}
}

{{range .Service.Methods}}
{{- $method := . }}
{{- $rpcID := methodExtension . "notebooklm.v1alpha1.rpc_id" }}
{{- $argFormat := methodExtension . "notebooklm.v1alpha1.arg_format" }}
{{- $chunkedResponse := methodExtension . "notebooklm.v1alpha1.chunked_response" }}

// {{.GoName}} calls the {{.GoName}} RPC method.
func (c *{{$service.GoName}}Client) {{.GoName}}(ctx context.Context, req *notebooklmv1alpha1.{{.Input.GoIdent.GoName}}) (*{{if eq .Output.GoIdent.GoName "Empty"}}emptypb.Empty{{else}}notebooklmv1alpha1.{{.Output.GoIdent.GoName}}{{end}}, error) {
	{{- if $rpcID }}
	// Build the RPC call
	call := rpc.Call{
		ID: "{{$rpcID}}",
		{{- if $argFormat }}
		Args: method.Encode{{.GoName}}Args(req),
		{{- else }}
		Args: []interface{}{}, // TODO: implement argument encoding
		{{- end }}
	}
	
	// Execute the RPC
	resp, err := c.rpcClient.Do(call)
	if err != nil {
		return nil, fmt.Errorf("{{.GoName}}: %w", err)
	}
	
	// Decode the response
	{{- if eq .Output.GoIdent.GoName "Empty" }}
	var result emptypb.Empty
	{{- else }}
	var result notebooklmv1alpha1.{{.Output.GoIdent.GoName}}
	{{- end }}
	if err := beprotojson.Unmarshal(resp, &result); err != nil {
		return nil, fmt.Errorf("{{.GoName}}: unmarshal response: %w", err)
	}
	
	return &result, nil
	{{- else }}
	// No RPC ID defined for this method
	return nil, fmt.Errorf("{{.GoName}}: RPC ID not defined in proto")
	{{- end }}
}

{{end}}