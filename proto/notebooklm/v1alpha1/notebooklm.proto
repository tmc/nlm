// This is a hand reconstruction of the notebooklm types.
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package notebooklm.v1alpha1;

option go_package = "github.com/tmc/nlm/gen/notebooklm/v1alpha1;notebooklm";

message Project {
  string title = 1;
  repeated Source sources = 2;
  string project_id = 3;
  string emoji = 4;
  ProjectMetadata metadata = 6;
  //ChatbotConfig config = 6;
  //AdvancedSettings advanced_settings = 7;
  //oneof project_state {
  //  ProjectCreateData create = 8;
  //  ProjectDeleteData delete = 9;
  //}
}

message ProjectMetadata {
    int32 user_role = 1;
    bool session_active = 2;  // or similar
    // bool something = 3;
    // field 4 reserved/unknown
    // field 5 reserved/unknown
    google.protobuf.Timestamp create_time = 9;
    google.protobuf.Timestamp modified_time = 6;  // or similar
    int32 type = 7;
    bool is_starred = 8;
}

message SourceId {
  string source_id = 1;
}

message Source {
  SourceId source_id = 1;
  string title = 2;
  SourceMetadata metadata = 3;
  SourceSettings settings = 4;
  repeated google.protobuf.Int32Value warnings = 5;
}

message SourceMetadata {
    oneof metadata_type {
      GoogleDocsSourceMetadata google_docs = 1;
      YoutubeSourceMetadata youtube = 6;
    }
    google.protobuf.Int32Value last_update_time_seconds = 2;
    google.protobuf.Timestamp last_modified_time = 3;
    // google.internal.labs.tailwind.common.v1.RevisionData revision_data = 4;
    SourceType source_type = 5;
}


enum SourceType {
    SOURCE_TYPE_UNSPECIFIED = 0;
    SOURCE_TYPE_UNKNOWN = 1;
    SOURCE_TYPE_GOOGLE_DOCS = 3;
    SOURCE_TYPE_GOOGLE_SLIDES = 4;
    SOURCE_TYPE_GOOGLE_SHEETS = 5;
    SOURCE_TYPE_LOCAL_FILE = 6;
    SOURCE_TYPE_WEB_PAGE = 7;
    SOURCE_TYPE_SHARED_NOTE = 8;
    SOURCE_TYPE_YOUTUBE_VIDEO = 9;
}


message GoogleDocsSourceMetadata {
    string document_id = 1;
}


message YoutubeSourceMetadata {
    string youtube_url = 1;
    string video_id = 2;
}


message SourceSettings {
    enum SourceStatus {
      SOURCE_STATUS_UNSPECIFIED = 0;
      SOURCE_STATUS_ENABLED = 1;
      SOURCE_STATUS_DISABLED = 2;
      SOURCE_STATUS_ERROR = 3;
    }
    SourceStatus status = 2;
    // google.internal.labs.tailwind.common.v1.SourceIssue reason = 3;
}

message SourceIssue {
  enum Reason {
    REASON_UNSPECIFIED = 0;
    REASON_TEMPORARY_SERVER_ERROR = 1;
    REASON_PERMANENT_SERVER_ERROR = 2;
    REASON_INVALID_SOURCE_ID = 3;
    REASON_SOURCE_NOT_FOUND = 4;
    REASON_UNSUPPORTED_MIME_TYPE = 5;
    REASON_YOUTUBE_ERROR_GENERIC = 6;
    REASON_YOUTUBE_ERROR_UNLISTED = 7;
    REASON_YOUTUBE_ERROR_PRIVATE = 8;
    REASON_YOUTUBE_ERROR_MEMBERS_ONLY = 9;
    REASON_YOUTUBE_ERROR_LOGIN_REQUIRED = 10;
    REASON_GOOGLE_DOCS_ERROR_GENERIC = 11;
    REASON_GOOGLE_DOCS_ERROR_NO_ACCESS = 12;
    REASON_GOOGLE_DOCS_ERROR_UNKNOWN = 13;
    REASON_DOWNLOAD_FAILURE = 14;
    REASON_UNKNOWN = 15;
  }
    Reason reason = 1;
}

message GetNotesResponse {
  repeated Source notes = 1;
}

message AudioOverview {
  string status = 1;
  string content = 2;
  string instructions = 3;
}

message GenerateDocumentGuidesResponse {
  repeated DocumentGuide guides = 1;
}

message DocumentGuide {
  string content = 1;
}

message GenerateNotebookGuideResponse {
  string content = 1;
}

message GenerateOutlineResponse {
  string content = 1;
}

message GenerateSectionResponse {
  string content = 1;
}

message StartDraftResponse {
}

message StartSectionResponse {
}




message ListRecentlyViewedProjectsResponse {
  repeated Project projects = 1;
}



/*
service NotebookLM {
    // Notebook/Project operations
    rpc ListRecentlyViewedProjects(google.protobuf.Empty) returns (ListRecentlyViewedProjectsResponse) {
        option (rpc_id) = "wXbhsf";
    }
    rpc CreateProject(CreateNotebookRequest) returns (Project) {
        option (rpc_id) = "CCqFvf";
    }
    rpc GetProject(LoadNotebookRequest) returns (Project) {
        option (rpc_id) = "rLM1Ne";
    }
    rpc DeleteProjects(DeleteProjectsRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "WWINqb";
    }
    rpc MutateProject(MutateProjectRequest) returns (Project) {
        option (rpc_id) = "s0tc2d";
    }
    rpc RemoveRecentlyViewedProject(RemoveRecentlyViewedProjectRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "fejl7e";
    }

    // Source operations
    rpc AddSources(AddSourceRequest) returns (Source) {
        option (rpc_id) = "izAoDd";
    }
    rpc DeleteSources(DeleteSourcesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "tGMBJ";
    }
    rpc MutateSource(MutateSourceRequest) returns (Source) {
        option (rpc_id) = "b7Wfje";
    }
    rpc RefreshSource(RefreshSourceRequest) returns (Source) {
        option (rpc_id) = "FLmJqe";
    }
    rpc LoadSource(LoadSourceRequest) returns (Source) {
        option (rpc_id) = "hizoJc";
    }
    rpc CheckSourceFreshness(CheckSourceFreshnessRequest) returns (CheckSourceFreshnessResponse) {
        option (rpc_id) = "yR9Yof";
    }
    rpc ActOnSources(ActOnSourcesRequest) returns (ActOnSourcesResponse) {
        option (rpc_id) = "yyryJe";
    }

    // Note operations
    rpc CreateNote(CreateNoteRequest) returns (Note) {
        option (rpc_id) = "CYK0Xb";
    }
    rpc MutateNote(UpdateNoteRequest) returns (Note) {
        option (rpc_id) = "cYAfTb";
    }
    rpc DeleteNotes(DeleteNotesRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "AH0mwd";
    }
    rpc GetNotes(GetNotesRequest) returns (GetNotesResponse) {
        option (rpc_id) = "cFji9";
    }

    // Audio operations
    rpc CreateAudioOverview(CreateAudioOverviewRequest) returns (AudioOverview) {
        option (rpc_id) = "AHyHrd";
    }
    rpc GetAudioOverview(GetAudioOverviewRequest) returns (AudioOverview) {
        option (rpc_id) = "VUsiyb";
    }
    rpc DeleteAudioOverview(DeleteAudioOverviewRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "sJDbic";
    }

    // Generation operations
    rpc GenerateDocumentGuides(GenerateDocumentGuidesRequest) returns (GenerateDocumentGuidesResponse) {
        option (rpc_id) = "tr032e";
    }
    rpc GenerateNotebookGuide(GenerateNotebookGuideRequest) returns (GenerateNotebookGuideResponse) {
        option (rpc_id) = "VfAZjd";
    }
    rpc GenerateOutline(GenerateOutlineRequest) returns (GenerateOutlineResponse) {
        option (rpc_id) = "lCjAd";
    }
    rpc GenerateSection(GenerateSectionRequest) returns (GenerateSectionResponse) {
        option (rpc_id) = "BeTrYd";
    }
    rpc StartDraft(StartDraftRequest) returns (StartDraftResponse) {
        option (rpc_id) = "exXvGf";
    }
    rpc StartSection(StartSectionRequest) returns (StartSectionResponse) {
        option (rpc_id) = "pGC7gf";
    }

    // Account operations
    rpc GetOrCreateAccount(GetOrCreateAccountRequest) returns (Account) {
        option (rpc_id) = "ZwVcOc";
    }
    rpc MutateAccount(MutateAccountRequest) returns (Account) {
        option (rpc_id) = "hT54vc";
    }

    // Analytics operations
    rpc GetProjectAnalytics(GetProjectAnalyticsRequest) returns (ProjectAnalytics) {
        option (rpc_id) = "AUrzMb";
    }
    rpc SubmitFeedback(SubmitFeedbackRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "uNyJKe";
    }
}

// Sharing service
service NotebookLMSharing {
    rpc ShareAudio(ShareAudioRequest) returns (ShareAudioResponse) {
        option (rpc_id) = "RGP97b";
    }
    rpc GetProjectDetails(GetProjectDetailsRequest) returns (ProjectDetails) {
        option (rpc_id) = "JFMDGd";
    }
    rpc ShareProject(ShareProjectRequest) returns (ShareProjectResponse) {
        option (rpc_id) = "QDyure";
    }
}

// Guidebooks service
service NotebookLMGuidebooks {
    rpc DeleteGuidebook(DeleteGuidebookRequest) returns (google.protobuf.Empty) {
        option (rpc_id) = "ARGkVc";
    }
    rpc GetGuidebook(GetGuidebookRequest) returns (Guidebook) {
        option (rpc_id) = "EYqtU";
    }
    rpc ListRecentlyViewedGuidebooks(ListRecentlyViewedGuidebooksRequest) returns (ListRecentlyViewedGuidebooksResponse) {
        option (rpc_id) = "YJBpHc";
    }
    rpc PublishGuidebook(PublishGuidebookRequest) returns (Guidebook) {
        option (rpc_id) = "R6smae";
    }
    rpc GetGuidebookDetails(GetGuidebookDetailsRequest) returns (GuidebookDetails) {
        option (rpc_id) = "LJyzeb";
    }
    rpc ShareGuidebook(ShareGuidebookRequest) returns (ShareGuidebookResponse) {
        option (rpc_id) = "OTl0K";
    }
}
*/
